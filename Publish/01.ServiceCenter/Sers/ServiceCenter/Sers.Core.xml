<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Sers.Core</name>
    </assembly>
    <members>
        <member name="P:Sers.Core.CL.CommunicationManage.CommunicationManageClient.requestTimeoutMs">
            <summary>
            请求超时时间（单位ms，默认60000）(Config.requestTimeoutMs)
            </summary>
        </member>
        <member name="P:Sers.Core.CL.CommunicationManage.CommunicationManageClient.conn_OnGetRequest">
            <summary>
            会在内部线程中被调用 
            </summary>
        </member>
        <member name="F:Sers.Core.CL.CommunicationManage.CommunicationManageClient.BeforeBuildOrganize">
             <summary>
            
             </summary>
        </member>
        <member name="P:Sers.Core.CL.CommunicationManage.CommunicationManageServer.CurConn">
            <summary>
            当前连接
            </summary>
        </member>
        <member name="P:Sers.Core.CL.CommunicationManage.CommunicationManageServer.requestTimeoutMs">
            <summary>
            请求超时时间（单位ms，默认60000）(Config.requestTimeoutMs)
            </summary>
        </member>
        <member name="P:Sers.Core.CL.CommunicationManage.CommunicationManageServer.conn_OnGetRequest">
            <summary>
            会在内部线程中被调用 
            (conn,sender,requestData, callback)
            </summary>
        </member>
        <member name="P:Sers.Core.CL.CommunicationManage.CommunicationManageServer.BeforeBuildOrganize">
            <summary>
            configs,organizeList
            </summary>
        </member>
        <member name="T:Sers.Core.CL.MessageDelivery.DeliveryConnState">
            <summary>
            (0:waitForCertify; 2:certified; 4:waitForClose; 8:closed;)
            </summary>
        </member>
        <member name="P:Sers.Core.CL.MessageDelivery.IDeliveryClient.Conn_OnGetFrame">
            <summary>
            请勿处理耗时操作，需立即返回。收到数据事件
            </summary>
        </member>
        <member name="P:Sers.Core.CL.MessageDelivery.IDeliveryConnection.state">
            <summary>
            连接状态(0:waitForCertify; 2:certified; 4:waitForClose; 8:closed;)
            </summary>
        </member>
        <member name="P:Sers.Core.CL.MessageDelivery.IDeliveryServer.Conn_OnConnected">
            <summary>
            请勿处理耗时操作，需立即返回
            </summary>
        </member>
        <member name="P:Sers.Core.CL.MessageDelivery.IDeliveryServer.Conn_OnDisconnected">
            <summary>
            请勿处理耗时操作，需立即返回
            </summary>
        </member>
        <member name="F:Sers.Core.CL.MessageOrganize.DefaultOrganize.EFrameType.request">
            <summary>
            request
            </summary>
        </member>
        <member name="F:Sers.Core.CL.MessageOrganize.DefaultOrganize.EFrameType.reply">
            <summary>
            reply
            </summary>
        </member>
        <member name="F:Sers.Core.CL.MessageOrganize.DefaultOrganize.EFrameType.message">
            <summary>
            单向数据
            </summary>
        </member>
        <member name="F:Sers.Core.CL.MessageOrganize.DefaultOrganize.OrganizeClient.secretKey">
            <summary>
            连接秘钥，用以验证连接安全性。服务端和客户端必须一致
            </summary>
        </member>
        <member name="P:Sers.Core.CL.MessageOrganize.DefaultOrganize.OrganizeClient.conn_OnGetRequest">
            <summary>
            会在内部线程中被调用 
            (conn,sender,requestData,callback)
            </summary>
        </member>
        <member name="F:Sers.Core.CL.MessageOrganize.DefaultOrganize.OrganizeServer.secretKey">
            <summary>
            连接秘钥，用以验证连接安全性。服务端和客户端必须一致
            </summary>
        </member>
        <member name="F:Sers.Core.CL.MessageOrganize.DefaultOrganize.OrganizeServer.connMap">
            <summary>
            已经认证过的连接
            </summary>
        </member>
        <member name="P:Sers.Core.CL.MessageOrganize.DefaultOrganize.OrganizeServer.conn_OnGetRequest">
            <summary>
            会在内部线程中被调用 
            </summary>
        </member>
        <member name="T:Sers.Core.CL.MessageOrganize.DefaultOrganize.RequestAdaptor">
            <summary>
            协调 MessageDelivery  和 MessageOrganize，只负责处理数据，不负责管理打开或关闭事件
            </summary>
        </member>
        <member name="P:Sers.Core.CL.MessageOrganize.DefaultOrganize.RequestAdaptor.event_OnGetRequest">
            <summary>
            deliveryToOrganize_OnGetRequest
            会在内部线程中被调用 
            (conn,sender,requestData,callback)
            </summary>
        </member>
        <member name="P:Sers.Core.CL.MessageOrganize.DefaultOrganize.RequestAdaptor.event_OnGetMessage">
            <summary>
            deliveryToOrganize_OnGetMessage
            会在内部线程中被调用
            </summary>
        </member>
        <member name="F:Sers.Core.CL.MessageOrganize.DefaultOrganize.RequestAdaptor.workThreadCount">
            <summary>
            后台处理消息的线程个数（单位个，默认2）
            </summary>
        </member>
        <member name="F:Sers.Core.CL.MessageOrganize.DefaultOrganize.RequestAdaptor.requestTimeoutMs">
            <summary>
            请求超时时间（单位ms，默认60000）
            </summary>
        </member>
        <member name="F:Sers.Core.CL.MessageOrganize.DefaultOrganize.RequestAdaptor.heartBeatTimeoutMs">
            <summary>
            心跳检测超时时间（单位ms，默认30000）
            </summary>
        </member>
        <member name="F:Sers.Core.CL.MessageOrganize.DefaultOrganize.RequestAdaptor.heartBeatRetryCount">
            <summary>
            心跳检测失败重试次数（单位次，默认10）
            </summary>
        </member>
        <member name="F:Sers.Core.CL.MessageOrganize.DefaultOrganize.RequestAdaptor.heartBeatIntervalMs">
            <summary>
            心跳检测时间间隔（单位ms，默认10000,若指定为0则不进行心跳检测）
            </summary>
        </member>
        <member name="M:Sers.Core.CL.MessageOrganize.DefaultOrganize.RequestAdaptor.DeliveryToOrganize_MessageFrame.Push">
            <summary>
            使用结束请手动调用
            </summary>
        </member>
        <member name="M:Sers.Core.CL.MessageOrganize.DefaultOrganize.RequestAdaptor.DeliveryToOrganize_RequestInfo.Push">
            <summary>
            使用结束请手动调用
            </summary>
        </member>
        <member name="M:Sers.Core.CL.MessageOrganize.DefaultOrganize.RequestAdaptor.OrganizeToDelivery_RequestInfo.Push">
            <summary>
            使用结束请手动调用
            </summary>
        </member>
        <member name="P:Sers.Core.CL.MessageOrganize.DefaultOrganize.RequestAdaptor.HeartBeatPackage.timeouted">
            <summary>
            是否超时  true:已经超时  false:未超时   null:未知
            </summary>
        </member>
        <member name="M:Sers.Core.CL.MessageOrganize.DefaultOrganize.RequestAdaptor.PackageReqRepFrame(System.Int64,System.Collections.Generic.List{System.ArraySegment{System.Byte}},System.Collections.Generic.List{System.ArraySegment{System.Byte}}@)">
            <summary>
            注：调用后，oriMsg会错乱
            </summary>
            <param name="reqKey"></param>
            <param name="oriMsg"></param>
            <param name="reqRepFrame"></param>
        </member>
        <member name="P:Sers.Core.CL.MessageOrganize.IOrganizeClient.conn_OnGetRequest">
            <summary>
            会在内部线程中被调用 
            (conn,sender,requestData,callback)
            </summary>
        </member>
        <member name="P:Sers.Core.CL.MessageOrganize.IOrganizeServer.conn_OnGetRequest">
            <summary>
            会在内部线程中被调用 
            (conn,sender,requestData, callback)
            </summary>
        </member>
        <member name="M:Sers.Core.Module.ApiLoader.ApiLoaderMng.LoadApi">
            <summary>
            从配置文件(appsettings.json  Sers.LocalApiService.ApiLoaders ) 加载api加载器并加载api
            </summary>
            <returns></returns>
        </member>
        <member name="M:Sers.Core.Module.Api.ApiClient.SetOnSendRequest(System.Func{System.Collections.Generic.List{System.ArraySegment{System.Byte}},System.ArraySegment{System.Byte}}[])">
            <summary>
            callbacks长度必须大于1
            </summary>
            <param name="callbacks"></param>
        </member>
        <member name="M:Sers.Core.Module.Api.ApiClient.CallApi(System.Collections.Generic.List{System.ArraySegment{System.Byte}})">
            <summary>
            
            </summary>
            <param name="reqOri"></param>
            <returns></returns>
        </member>
        <member name="M:Sers.Core.Module.Api.ApiClient.CallApi(Sers.Core.Module.Message.ApiMessage)">
            <summary>
            
            </summary>
            <param name="request"></param>
            <returns></returns>
        </member>
        <member name="M:Sers.Core.Module.Api.ApiClient.CallApiAsync(Sers.Core.Module.Message.ApiMessage)">
            <summary>
            
            </summary>
            <param name="request"></param>
            <returns></returns>
        </member>
        <member name="M:Sers.Core.Module.Api.ApiClient.CallApi``1(System.String,System.Object,System.String,System.Action{Sers.Core.Module.Rpc.IRpcContextData})">
            <summary>
            
            </summary>
            <typeparam name="ReturnType"></typeparam>
            <param name="route"></param>
            <param name="arg"></param>
            <param name="httpMethod">可为 GET、POST、DELETE、PUT等,可不指定</param>
            <param name="InitRpc">对Rpc的额外处理,如添加header</param>
            <returns></returns>
        </member>
        <member name="M:Sers.Core.Module.Api.ApiClient.CallApi(System.String,System.Object,System.String,System.Action{Sers.Core.Module.Rpc.IRpcContextData})">
            <summary>
            
            </summary>
            <param name="route"></param>
            <param name="arg"></param>
            <param name="httpMethod">可为 GET、POST、DELETE、PUT等,可不指定</param>
            <param name="InitRpc">对Rpc的额外处理,如添加header</param>
            <returns></returns>
        </member>
        <member name="M:Sers.Core.Module.Api.ApiClient.CallApiAsync``1(System.String,System.Object,System.String,System.Action{Sers.Core.Module.Rpc.IRpcContextData})">
            <summary>
            
            </summary>
            <typeparam name="ReturnType"></typeparam>
            <param name="route"></param>
            <param name="arg"></param>
            <param name="httpMethod">可为 GET、POST、DELETE、PUT等,可不指定</param>
            <param name="InitRpc">对Rpc的额外处理,如添加header</param>
            <returns></returns>
        </member>
        <member name="M:Sers.Core.Module.Api.ApiClient.CallRemoteApi(Sers.Core.Module.Message.ApiMessage)">
            <summary>
            
            </summary>
            <param name="request"></param>
            <returns></returns>
        </member>
        <member name="M:Sers.Core.Module.Api.ApiClient.CallRemoteApi(System.String,System.String,System.String,System.Action{Sers.Core.Module.Rpc.IRpcContextData})">
            <summary>
            
            </summary>
            <param name="route"></param>
            <param name="arg"></param>
            <param name="httpMethod">可为 GET、POST、DELETE、PUT等,可不指定</param>
            <param name="InitRpc">对Rpc的额外处理,如添加header</param>
        </member>
        <member name="M:Sers.Core.Module.Api.ApiClient.CallRemoteApi(System.String,System.Object,System.String,System.Action{Sers.Core.Module.Rpc.IRpcContextData})">
            <summary>
            
            </summary>
            <param name="route"></param>
            <param name="arg"></param>
            <param name="httpMethod">可为 GET、POST、DELETE、PUT等,可不指定</param>
            <param name="InitRpc">对Rpc的额外处理,如添加header</param>
        </member>
        <member name="M:Sers.Core.Module.Api.ApiClient.CallRemoteApi``1(System.String,System.Object,System.String,System.Action{Sers.Core.Module.Rpc.IRpcContextData})">
            <summary>
            
            </summary>
            <typeparam name="ReturnType"></typeparam>
            <param name="route"></param>
            <param name="arg"></param>
            <param name="httpMethod">可为 GET、POST、DELETE、PUT等,可不指定</param>
            <param name="InitRpc">对Rpc的额外处理,如添加header</param>
            <returns></returns>
        </member>
        <member name="M:Sers.Core.Module.Api.ApiClient.CallRemoteApiAsync(Sers.Core.Module.Message.ApiMessage)">
            <summary>
            
            </summary>
            <param name="request"></param>
            <returns></returns>
        </member>
        <member name="M:Sers.Core.Module.Api.ApiClient.CallRemoteApiAsync``1(System.String,System.Object,System.String,System.Action{Sers.Core.Module.Rpc.IRpcContextData})">
            <summary>
            
            </summary>
            <typeparam name="ReturnType"></typeparam>
            <param name="route"></param>
            <param name="arg"></param>
            <param name="httpMethod">可为 GET、POST、DELETE、PUT等,可不指定</param>
            <param name="InitRpc">对Rpc的额外处理,如添加header</param>
            <returns></returns>
        </member>
        <member name="T:Sers.Core.Module.Api.ApiDesc.SsApiDesc">
            <summary>
            Api描述
            </summary>
        </member>
        <member name="P:Sers.Core.Module.Api.ApiDesc.SsApiDesc.name">
            <summary>
            api名称(不为route)
            </summary>
        </member>
        <member name="P:Sers.Core.Module.Api.ApiDesc.SsApiDesc.description">
            <summary>
            文字描述
            </summary>
        </member>
        <member name="P:Sers.Core.Module.Api.ApiDesc.SsApiDesc.route">
            <summary>
            路由 例如 "/ApiStation1/path1/path2/api1"
            </summary>        
        </member>
        <member name="P:Sers.Core.Module.Api.ApiDesc.SsApiDesc.extendConfig">
            <summary>
            扩展配置（json）
            </summary>
        </member>
        <member name="P:Sers.Core.Module.Api.ApiDesc.SsApiDesc.argType">
            <summary>
            请求参数类型(SsModel类型)
            </summary>
        </member>
        <member name="P:Sers.Core.Module.Api.ApiDesc.SsApiDesc.returnType">
            <summary>
            返回数据类型(SsModel类型)
            </summary>
        </member>
        <member name="P:Sers.Core.Module.Api.ApiDesc.SsApiDesc.rpcValidations">
            <summary>
            api调用限制(rpc)，sers1版本使用（为了兼容，暂不禁用）
            </summary>
        </member>
        <member name="P:Sers.Core.Module.Api.ApiDesc.SsApiDesc.rpcVerify2">
            <summary>
            api调用限制(rpc)，sers2版本使用
            </summary>
        </member>
        <member name="P:Sers.Core.Module.Api.ApiDesc.SsApiDesc.ext">
            <summary>
            额外数据
            </summary>
        </member>
        <member name="F:Sers.Core.Module.Api.ApiDesc.SsModel.type">
            <summary>
            数据类型。 可为 object、string、int32、int64、float、double、bool、datetime 或 SsModelEntity的name
            </summary>
        </member>
        <member name="F:Sers.Core.Module.Api.ApiDesc.SsModel.mode">
            <summary>
             数据模式。只可为 value、object、array
            </summary>
        </member>
        <member name="F:Sers.Core.Module.Api.ApiDesc.SsModel.description">
            <summary>
            描述
            </summary>
        </member>
        <member name="F:Sers.Core.Module.Api.ApiDesc.SsModel.defaultValue">
            <summary>
            默认值
            </summary>
        </member>
        <member name="F:Sers.Core.Module.Api.ApiDesc.SsModel.example">
            <summary>
            示例值
            </summary>
        </member>
        <member name="F:Sers.Core.Module.Api.ApiDesc.SsModelEntity.type">
            <summary>
            数据类型。可以唯一定位到一个模型
            </summary>
        </member>
        <member name="F:Sers.Core.Module.Api.ApiDesc.SsModelEntity.mode">
            <summary>
             数据模式。只可为 value、object、array
            </summary>
        </member>
        <member name="F:Sers.Core.Module.Api.ApiDesc.SsModelEntity.propertys">
            <summary>
            成员属性
            </summary>
        </member>
        <member name="F:Sers.Core.Module.Api.ApiDesc.SsModelProperty.name">
            <summary>
            名称
            </summary>
        </member>
        <member name="F:Sers.Core.Module.Api.ApiDesc.SsModelProperty.type">
            <summary>
            数据类型。 可为 object、string、int32、int64、float、double、bool、datetime 或 SsModelEntity的name
            </summary>
        </member>
        <member name="F:Sers.Core.Module.Api.ApiDesc.SsModelProperty.mode">
            <summary>
             数据模式。只可为 value、object、array
            </summary>
        </member>
        <member name="F:Sers.Core.Module.Api.ApiDesc.SsModelProperty.description">
            <summary>
            描述
            </summary>
        </member>
        <member name="F:Sers.Core.Module.Api.ApiDesc.SsModelProperty.defaultValue">
            <summary>
            默认值
            </summary>
        </member>
        <member name="F:Sers.Core.Module.Api.ApiDesc.SsModelProperty.example">
            <summary>
            示例值
            </summary>
        </member>
        <member name="T:Sers.Core.Module.Api.ApiEvent.ApiScope.IApiScopeEvent">
            <summary>
            调用Api时的自定义Scope对象
            </summary>
        </member>
        <member name="M:Sers.Core.Module.Api.ApiEvent.ApiScope.IApiScopeEvent.OnCreateScope">
            <summary>
            返回对象在apiScope结束时被调用，可为空
            </summary>
            <returns></returns>
        </member>
        <member name="T:Sers.Core.Module.Api.ApiEvent.BeforeCallApi.AccountInCookie.AccountInCookie">
            <summary>
            在调用接口前，会获取 rpcData.http.headers.Cookie(格式为 "user=xxx;c=7")中的user，在账号列表中比对userToken，回写 CallerSource(rpcData.caller.source) 和 userInfo(rpcData.user.userInfo)
            </summary>
        </member>
        <member name="M:Sers.Core.Module.Api.ApiEvent.BeforeCallApi.AccountInCookie.AccountInCookie.Init(Newtonsoft.Json.Linq.JObject)">
            <summary>
             Sers.AccountInCookie.account:            [ {"userToken":"admin_123","CallerSource":"Internal","userInfo":{}  }      ]  
            </summary>
            <param name="config"></param>
        </member>
        <member name="M:Sers.Core.Module.Api.ApiEvent.BeforeCallApi.AccountInCookie.AccountInCookie.BeforeCallApi(Sers.Core.Module.Rpc.IRpcContextData,Sers.Core.Module.Message.ApiMessage)">
            <summary>
            转换Cookie为对应的用户
            </summary>
            <param name="rpcData"></param>
            <param name="requestMessage"></param>
        </member>
        <member name="T:Sers.Core.Module.Api.ApiEvent.BeforeCallApi.Bearer.Bearer">
            <summary>
            在调用接口前，会获取 rpcData.http.headers.Authorization(格式为 "Bearer xxxxxx")，并作为参数调用接口api_verifyAt，把返回数据放到 rpcData.user.userInfo
            </summary>
        </member>
        <member name="M:Sers.Core.Module.Api.ApiEvent.BeforeCallApi.Bearer.Bearer.BeforeCallApi(Sers.Core.Module.Rpc.IRpcContextData,Sers.Core.Module.Message.ApiMessage)">
            <summary>
            Bearer。 转换at为对应的用户
            </summary>
            <param name="rpcData"></param>
            <param name="requestMessage"></param>
        </member>
        <member name="T:Sers.Core.Module.Api.ApiEvent.BeforeCallApi.IBeforeCallApi">
            <summary>
            调用api前的事件
            </summary>
        </member>
        <member name="M:Sers.Core.Module.Api.ApiEvent.EventBuilder.LoadEvent_BeforeCallApi(Newtonsoft.Json.Linq.JArray)">
            <summary>
            从传入的配置项加载BeforeCallApi事件
            </summary>
            <param name="events"></param>
            <returns></returns>
        </member>
        <member name="M:Sers.Core.Module.Api.ApiEvent.EventBuilder.LoadEvent_OnCreateScope(Newtonsoft.Json.Linq.JArray)">
            <summary>
            从传入的配置项加载OnCreateScope事件
            </summary>
            <param name="events"></param>
            <returns></returns>
        </member>
        <member name="F:Sers.Core.Module.Api.LocalApi.ApiNodeMng.apiNodeMapWithMethod">
            <summary>
            映射  /{httpMethod}{route} -> LocalApiNode
            例如 "/POST/api/value"
            </summary>
        </member>
        <member name="F:Sers.Core.Module.Api.LocalApi.ApiNodeMng.apiNodeMapWithoutMethod">
            <summary>
            映射  {route} -> LocalApiNode
            例如 "/api/value"
            </summary>
        </member>
        <member name="T:Sers.Core.Module.Api.LocalApi.Event.LocalApiEventMng">
            <summary>
            事件顺序为  OnCreateScope -> BeforeCallApi -> OnDispose
            </summary>
        </member>
        <member name="F:Sers.Core.Module.Api.LocalApi.Event.LocalApiEventMng.BeforeCallApi">
            <summary>
            BeforeCallApi(IRpcContextData rpcData, ApiMessage requestMessage)
            </summary>
        </member>
        <member name="P:Sers.Core.Module.Api.LocalApi.LocalApiService.workThreadCount">
            <summary>
            后台服务的线程个数（单位个，默认0,代表不开启服务）(appsettings.json :: Sers.LocalApiService.workThreadCount)
            </summary>
        </member>
        <member name="F:Sers.Core.Module.Api.LocalApi.LocalApiService.apiNodeMng">
            <summary>
            映射  route -> LocalApiNode
            </summary>
        </member>
        <member name="M:Sers.Core.Module.Api.LocalApi.LocalApiService.LoadApi">
            <summary>
            从配置文件(appsettings.json  Sers.LocalApiService.ApiLoaders ) 加载api加载器并加载api
            </summary>
        </member>
        <member name="M:Sers.Core.Module.Api.LocalApi.LocalApiService.LoadSersApi(Sers.SersLoader.ApiLoaderConfig)">
            <summary>
            调用SersApi加载器加载api
            </summary>
            <param name="config"></param>
        </member>
        <member name="M:Sers.Core.Module.Api.LocalApi.LocalApiService.LoadSersApi(System.Reflection.Assembly)">
            <summary>
            调用SersApi加载器加载api
            </summary>
            <param name="assembly"></param>
        </member>
        <member name="M:Sers.Core.Module.Api.LocalApi.LocalApiService.CallLocalApi(Sers.Core.Module.Message.ApiMessage)">
            <summary>
            构建RpcContext并调用
            </summary>
            <param name="apiRequest"></param>
            <returns></returns>
        </member>
        <member name="F:Sers.Core.Module.Api.LocalApi.LocalApiService.worker">
            <summary>
            后台调用Api的线程 
            </summary>
        </member>
        <member name="P:Sers.Core.Module.Api.LocalApi.LocalApiService.Worker_TimeLimit.timeout_ms">
            <summary>
            超时时间，（主动关闭超过此时间的任务,实际任务强制关闭的时间会在1倍超时时间到2倍超时时间内)。单位：ms。
            脉冲间隔。
            </summary>
        </member>
        <member name="P:Sers.Core.Module.Api.LocalApi.StaticFileTransmit.Extensions.StaticFilesApiNodeConfig.route">
            <summary>
            api路由前缀，例如 "/demo/ui/*"
            </summary>
        </member>
        <member name="P:Sers.Core.Module.Api.LocalApi.StaticFileTransmit.Extensions.StaticFilesApiNodeConfig.apiName">
            <summary>
            api描述，静态文件描述
            </summary>
        </member>
        <member name="T:Sers.Core.Module.Api.LocalApi.StaticFileTransmit.FileExtensionContentTypeProvider">
            <summary>
            Provides a mapping between file extensions and MIME types.
            </summary>
        </member>
        <member name="P:Sers.Core.Module.Api.LocalApi.StaticFileTransmit.FileExtensionContentTypeProvider.Mappings">
            <summary>
            The cross reference table of file extensions and content-types.
            </summary>
        </member>
        <member name="M:Sers.Core.Module.Api.LocalApi.StaticFileTransmit.FileExtensionContentTypeProvider.#ctor">
            <summary>
            Creates a new provider with a set of default mappings.
            </summary>
        </member>
        <member name="M:Sers.Core.Module.Api.LocalApi.StaticFileTransmit.FileExtensionContentTypeProvider.#ctor(System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Creates a lookup engine using the provided mapping.
            It is recommended that the IDictionary instance use StringComparer.OrdinalIgnoreCase.
            </summary>
            <param name="mapping"></param>
        </member>
        <member name="M:Sers.Core.Module.Api.LocalApi.StaticFileTransmit.FileExtensionContentTypeProvider.TryGetContentType(System.String,System.String@)">
            <summary>
            Given a file path, determine the MIME type
            </summary>
            <param name="subpath">A file path</param>
            <param name="contentType">The resulting MIME type</param>
            <returns>True if MIME type could be determined</returns>
        </member>
        <member name="P:Sers.Core.Module.Api.LocalApi.StaticFileTransmit.StaticFileMap.fileBasePath">
            <summary>
            D://fold1/wwwroot
            静态文件绝对路径
            </summary>
        </member>
        <member name="M:Sers.Core.Module.Api.LocalApi.StaticFileTransmit.StaticFileMap.LoadContentTypeFromFile(System.String)">
            <summary>
            
            </summary>
            <param name="filePath"></param>
            <returns></returns>
        </member>
        <member name="M:Sers.Core.Module.Api.LocalApi.StaticFileTransmit.StaticFileMap.#ctor(System.String)">
            <summary>
            fileBasePath：静态文件路径。可为相对路径或绝对路径。若不指定（null或空字符串）则默认为入口程序所在目录下的wwwroot文件夹。
              demo  D://fold1/wwwroot 
            </summary>
            <param name="fileBasePath"></param>
        </member>
        <member name="M:Sers.Core.Module.Api.LocalApi.StaticFileTransmit.StaticFileMap.GetRelativePath">
            <summary>
            获取当前url对应的相对文件路径(若不合法，则返回null)。demo:"rpc/2.html"
            <para>（若 route为"/Station1/fold1/a/*"，url为"http://127.0.0.1/Station1/fold1/a/1/2.html?c=9",则 relativePath为"1/2.html"）</para>
            </summary>
            <returns></returns>
        </member>
        <member name="M:Sers.Core.Module.Api.LocalApi.StaticFileTransmit.StaticFileMap.GetAbsFilePath">
            <summary>
            获取当前url映射到文件系统中的绝对路径。demo:"/root/netapp/FileStorage/wwwroot/fold2/a.html"
            </summary>
            <returns></returns>
        </member>
        <member name="P:Sers.Core.Module.Api.LocalApi.StaticFileTransmit.StaticFilesConfig.rootPath">
            <summary>
            静态文件路径。可为相对路径或绝对路径。若为空或空字符串则默认为入口程序所在目录。demo:"wwwroot/demo"
            </summary>
        </member>
        <member name="P:Sers.Core.Module.Api.LocalApi.StaticFileTransmit.StaticFilesConfig.responseHeaders">
            <summary>
            回应静态文件时额外添加的http回应头。可不指定。
            </summary>       
        </member>
        <member name="P:Sers.Core.Module.Api.LocalApi.StaticFileTransmit.StaticFilesConfig.contentTypeMapFile">
            <summary>
            静态文件类型映射配置的文件路径。可为相对路径或绝对路径。例如"contentTypeMap.json"。若不指定（或指定的文件不存在）则不指定文件类型映射配置
            </summary>
        </member>
        <member name="F:Sers.Core.Module.Api.RouteMap.ERouteType.nomalRoute">
            <summary>
            普通接口。例如： "/station1/fold2/api1"
            </summary>
        </member>
        <member name="F:Sers.Core.Module.Api.RouteMap.ERouteType.genericRoute">
            <summary>
            泛接口。例如： "/station1/fold2/*"
            </summary>
        </member>
        <member name="M:Sers.Core.Module.Api.RouteMap.GenericRouteMap`1.Remove(System.String)">
            <summary>
            path demo：  "/station1/fold2/*"
            </summary>
            <param name="route"></param>
            <returns></returns>
        </member>
        <member name="M:Sers.Core.Module.Api.RouteMap.GenericRouteMap`1.Set(System.String,`0)">
            <summary>
             path demo：  "/station1/fold2/*"
            </summary>
            <param name="route"></param>
            <param name="apiService"></param>
        </member>
        <member name="M:Sers.Core.Module.Api.RouteMap.GenericRouteMap`1.Routing(System.String)">
            <summary>
            path demo：  "/station1/fold2/action2.html"
            </summary>
            <param name="route"></param>
            <returns></returns>
        </member>
        <member name="M:Sers.Core.Module.Api.RouteMap.GenericRouteMap`1.Tree`1.BuildPath(System.String)">
            <summary>
            path demo：  "/station1/fold2/api1"
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:Sers.Core.Module.Api.RouteMap.GenericRouteMap`1.Tree`1.QueryByPath(System.String)">
            <summary>
            path demo：  "/station1/fold2/api1/action2"
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:Sers.Core.Module.Api.RouteMap.GenericRouteMap`1.Tree`1.GetChildren(System.String)">
            <summary>
            path demo：  "/station1/fold2/api1/action2"
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:Sers.Core.Module.Api.RouteMap.GenericRouteMap`1.Tree`1.Remove(System.String)">
            <summary>
             path demo：  "/station1/fold2/api1/action2"
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:Sers.Core.Module.Api.RouteMap.IDataMap`1.Get(System.String)">
            <summary>
            根据路由字符串直接查找
            </summary>
            <param name="route"></param>
            <returns></returns>
        </member>
        <member name="M:Sers.Core.Module.Api.RouteMap.IDataMap`1.Routing(System.String)">
            <summary>
            通过路由规则查找
            </summary>
            <param name="route"></param>
            <returns></returns>
        </member>
        <member name="F:Sers.Core.Module.Api.RouteMap.NomalRouteMap`1.apiRouteMap">
            <summary>
             映射表 route ->  ApiService 
            </summary>
        </member>
        <member name="M:Sers.Core.Module.Api.RouteMap.RouteMap`1.RouteIsNormalApi(System.String)">
            <summary>
            是否为普通接口（不为泛接口）
            </summary>
            <param name="route"></param>
            <returns></returns>
        </member>
        <member name="M:Sers.Core.Module.Api.RouteMap.RouteMap`1.Set(System.String,`0)">
            <summary>
            path demo：  1."/station1/fold2/api1"    2."/station1/fold2/*"
            </summary>
            <param name="route"></param>
            <param name="apiService"></param>
        </member>
        <member name="M:Sers.Core.Module.Api.RouteMap.RouteMap`1.Get(System.String)">
            <summary>
            route demo：  1."/station1/fold2/api1"    2."/station1/fold2/*"
            </summary>
            <param name="route"></param>
            <returns></returns>
        </member>
        <member name="M:Sers.Core.Module.Api.RouteMap.RouteMap`1.Routing(System.String,Sers.Core.Module.Api.RouteMap.ERouteType@)">
            <summary>
            route demo：  1."/station1/fold2/api1"    2."/station1/fold2/*"   3."/station1/fold2/index.html"
            </summary>
            <param name="route"></param>
            <param name="routeType"></param>
            <returns></returns>
        </member>
        <member name="M:Sers.Core.Module.Api.RouteMap.RouteMap`1.Routing(System.String)">
            <summary>
            route demo：  1."/station1/fold2/api1"    2."/station1/fold2/*"   3."/station1/fold2/index.html"
            </summary>
            <param name="route"></param>
            <returns></returns>
        </member>
        <member name="M:Sers.Core.Module.Api.RouteMap.RouteMap`1.Remove(System.String)">
            <summary>
            route demo：  1."/station1/fold2/api1"    2."/station1/fold2/*"
            </summary>
            <param name="route"></param>
            <returns></returns>
        </member>
        <member name="T:Sers.Core.Module.Api.Rpc.ECallerSource">
            <summary>
            调用来源
            </summary>
        </member>
        <member name="F:Sers.Core.Module.Api.Rpc.ECallerSource.Internal">
            <summary>
            内部调用
            </summary>
        </member>
        <member name="F:Sers.Core.Module.Api.Rpc.ECallerSource.OutSide">
            <summary>
            外部调用(通过网关调用)
            </summary>
        </member>
        <member name="T:Sers.Core.Module.Api.Rpc.RpcContextData">
             <summary>
            
             </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Sers.Core.Module.Api.Rpc.RpcContextData.UnpackOriData(System.ArraySegment{System.Byte})" -->
        <member name="M:Sers.Core.Module.Api.Rpc.RpcContextData.PackageOriData">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="P:Sers.Core.Module.Api.Rpc.RpcContextData.caller_source">
            <summary>
            调用来源
            </summary>    
        </member>
        <member name="M:Sers.Core.Module.App.AppEvent.AppEventLoader.LoadAppEvent(Newtonsoft.Json.Linq.JArray)">
            <summary>
            从传入的配置项加载事件
            </summary>
            <param name="events"></param>
            <returns></returns>
        </member>
        <member name="M:Sers.Core.Module.App.SersApplication.RunAwait">
            <summary>
            强制控制台不退出，除非执行Stop()
            </summary>
        </member>
        <member name="M:Sers.Core.Module.App.SersApplication.ResistConsoleCancelKey(System.Action)">
            <summary>
            注册Ctrl+C 关闭事件
            </summary>
        </member>
        <member name="F:Sers.Core.Module.App.SersApplication.serviceStationInfo">
            <summary>
            服务站点信息
            </summary>
        </member>
        <member name="F:Sers.Core.Module.App.SersApplication.deviceInfo">
            <summary>
            服务站点硬件设备信息
            </summary>
        </member>
        <member name="M:Sers.Core.Module.Counter.Counter.ReportTo(Sers.Core.Module.Counter.Counter)">
            <summary>
            计数时 向上级报告
            </summary>
            <param name="parentCounter"></param>
        </member>
        <member name="F:Sers.Core.Module.Counter.Counter.sumCount">
            <summary>
            已经调用次数
            </summary>        
        </member>
        <member name="F:Sers.Core.Module.Counter.Counter.errorCount">
            <summary>
            失败调用次数
            </summary>        
        </member>
        <member name="P:Sers.Core.Module.Env.SersEnvironment.deviceKey">
            <summary>
            每台机器的deviceKey在任何时候都唯一
            </summary>
        </member>
        <member name="P:Sers.Core.Module.Env.SersEnvironment.serviceStationKey">
            <summary>
            每个服务站点的serviceStationKey在任何时候都唯一
            </summary>
        </member>
        <member name="M:Sers.Core.Module.Env.SersEnvironment.GetEntryAssemblyVersion">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="F:Sers.Core.Module.Env.ServiceStationInfo.serviceStationKey">
            <summary>
            站点key码，同一台机器上的同一个站点不变（根据机器码文件夹路径等计算得到）
            </summary>
        </member>
        <member name="F:Sers.Core.Module.Env.ServiceStationInfo.stationVersion">
            <summary>
            站点版本信息
            </summary>
        </member>
        <member name="F:Sers.Core.Module.Env.ServiceStationInfo.serviceStationName">
            <summary>
            站点Name
            </summary>
        </member>
        <member name="F:Sers.Core.Module.Env.ServiceStationInfo.info">
            <summary>
            站点附加信息
            </summary>
        </member>
        <member name="M:Sers.Core.Module.Env.UsageReporter.StartReportTask(System.Double)">
            <summary>
            开启自动上报Usage任务
            </summary>
        </member>
        <member name="M:Sers.Core.Module.Env.UsageReporter.StopReportTask">
            <summary>
            关闭自动上报Usage任务
            </summary>
        </member>
        <member name="M:Sers.Core.Module.Env.UsageReporter.UseUsageReporter">
            <summary>
            自动上报Usage任务
            </summary>
        </member>
        <member name="P:Sers.Core.Module.Message.ApiMessage.rpcContextData_OriData">
            <summary>
            RpcContextData Files[0]
            </summary>
        </member>
        <member name="P:Sers.Core.Module.Message.ApiMessage.value_OriData">
            <summary>
            value Files[1]
            若为Request 则为 ArgValue
            若为Reply 则为 ReturnValue
            </summary>
        </member>
        <member name="M:Sers.Core.Module.Message.SersFile.PackageArraySegmentByte(System.Collections.Generic.List{System.ArraySegment{System.Byte}})">
            <summary>
            每个文件为 ArraySegmentByte 类型
            </summary>
            <param name="files"></param>
            <returns></returns>
        </member>
        <member name="F:Sers.Core.Module.PubSub.EFrameType.publish">
            <summary>
             publish,msgTitle,msgData
            </summary>
        </member>
        <member name="F:Sers.Core.Module.PubSub.EFrameType.subscribe">
            <summary>
            subscribe,msgTitle
            </summary>
        </member>
        <member name="F:Sers.Core.Module.PubSub.EFrameType.subscribeCancel">
            <summary>
            subscribeCancel,msgTitle
            </summary>
        </member>
        <member name="F:Sers.Core.Module.PubSub.EFrameType.message">
            <summary>
            message,msgTitle,msgData
            </summary>
        </member>
        <member name="F:Sers.Core.Module.PubSub.EndpointManage.subscriberMap">
            <summary>
            消息订阅者   msgTitle ->    {Subscriber hashcode:Subscriber}
            </summary>
        </member>
        <member name="M:Sers.Core.Module.PubSub.HotPlugSubscriber.Subscribe">
            <summary>
            开启消息订阅
            </summary>
        </member>
        <member name="M:Sers.Core.Module.PubSub.HotPlugSubscriber.SubscribeCancel">
            <summary>
            关闭消息订阅
            </summary>
        </member>
        <member name="F:Sers.Core.Module.PubSub.MessageCenterService.subscriberMap">
            <summary>
            消息订阅者   msgTitle ->    connList
            </summary>
        </member>
        <member name="M:Sers.Core.Module.Reflection.ObjectLoader.CreateInstance(System.String,System.String)">
            <summary>
            
            </summary>
            <param name="assemblyFile">如： "Sers.CL.Zmq.FullDuplex.dll"</param>
            <param name="className">如： "Sers.CL.Zmq.FullDuplex.OrganizeClientBuilder"</param>
            <returns></returns>
        </member>
        <member name="M:Sers.Core.Module.Reflection.ObjectLoader.LoadAssemblyByFile(System.String)">
            <summary>
            
            </summary>
            <param name="assemblyFile"></param>
            <returns></returns>
        </member>
        <member name="F:Sers.Core.Module.Valid.Sers1.RpcVerify1.EValidType.Equal">
            <summary>
            { "type":"Equal","value":"Logined"}
            </summary>
        </member>
        <member name="F:Sers.Core.Module.Valid.Sers1.RpcVerify1.EValidType.Regex">
            <summary>
            { "type":"Regex","value":"^\\d{11}$"}
            </summary>
        </member>
        <member name="F:Sers.Core.Module.Valid.Sers1.RpcVerify1.EValidType.Required">
            <summary>
            { "type":"Required" }
            </summary>
        </member>
        <member name="F:Sers.Core.Module.Valid.Sers1.RpcVerify1.EValidType.Null">
            <summary>
            { "type":"Null"}   always true
            </summary>
        </member>
        <member name="F:Sers.Core.Module.Valid.Sers1.RpcVerify1.EValidType.NotEqual">
            <summary>
            { "type":"NotEqual","value":"Logined"}
            </summary>
        </member>
        <member name="F:Sers.Core.Module.Valid.Sers1.RpcVerify1.EValidType.Scope">
            <summary>
            { "type":"Scope","min":10.8,"max":12.5}  //包含最大值 最小值，可只指定最大值或最小值
            </summary>
        </member>
        <member name="F:Sers.Core.Module.Valid.Sers1.SsValidation.path">
            <summary>
            数据的路径
            </summary>
        </member>
        <member name="F:Sers.Core.Module.Valid.Sers1.SsValidation.ssError">
            <summary>
            验证不通过时提示的错误
            </summary>
        </member>
        <member name="F:Sers.Core.Module.Valid.Sers1.SsValidation.ssValid">
            <summary>
            验证方式
            </summary>
        </member>
        <member name="P:Sers.SersLoader.ApiDesc.Attribute.RpcVerify.SsRpcVerifyAttribute.verifiedWhenNull">
            <summary>
            当出现空值时，是否通过验证（默认不通过，false）
            </summary>
        </member>
        <member name="P:Sers.SersLoader.ApiDesc.Attribute.RpcVerify.SsRpcVerifyAttribute.condition">
            <summary>
            例如：{"type":"!=","path":"caller.source"  ,  "value":"Internal"  }
            </summary>
        </member>
        <member name="P:Sers.SersLoader.ApiDesc.Attribute.RpcVerify.SsRpcVerifyAttribute.errorMessage">
            <summary>
            校验不通过时的提示消息，若不指定则使用默认提示消息
            </summary>
        </member>
        <member name="P:Sers.SersLoader.ApiDesc.Attribute.RpcVerify.SsRpcVerifyAttribute.errorCode">
            <summary>
            校验不通过时的errorCode, 如 1000。可不指定
            </summary>
        </member>
        <member name="T:Sers.SersLoader.ApiDesc.Attribute.Valid.SsCallerSourceAttribute">
            <summary>
            调用来源限制(内部调用 外部调用) demo:
            [SsCallerSource(ECallerSource.Internal)]
            [SsCallerSource(ECallerSource.OutSide, errorMessage = "只可外部调用")]
            [SsCallerSource(callerSourceString = "Internal,OutSide")]
            </summary>
        </member>
        <member name="P:Sers.SersLoader.ApiDesc.Attribute.Valid.SsCallerSourceAttribute.callerSourceString">
            <summary>
            用逗号隔开的多个。例如 "Internal,OutSide"
            </summary>
        </member>
        <member name="P:Sers.SersLoader.ApiDesc.Attribute.Valid.SsCallerSourceAttribute.callerSource">
            <summary>
            可多个。例如：  ECallerSource.Internal| ECallerSource.OutSide
            </summary>
        </member>
        <member name="T:Sers.SersLoader.ApiDesc.Attribute.Valid.SsCmpAttribute">
            <summary>
            demo:
            [SsCmp(path = "http.method", type = "==" , value="PUT")]
            </summary>
        </member>
        <member name="P:Sers.SersLoader.ApiDesc.Attribute.Valid.SsCmpAttribute.type">
            <summary>
            可为 == !=  &gt;  &gt;=  &lt; &lt;= 等
            </summary>
        </member>
        <member name="T:Sers.SersLoader.ApiDesc.Attribute.Valid.SsEqualAttribute">
            <summary>
            demo:
              [SsEqual(path = "http.method", value = "PUT")]
            </summary>
        </member>
        <member name="T:Sers.SersLoader.ApiDesc.Attribute.Valid.SsNotEqualAttribute">
            <summary>
            demo:
            [SsNotEqual(path = "http.method", value = "PUT",errorMessage = "不可为PUT请求")]
            </summary>
        </member>
        <member name="T:Sers.SersLoader.ApiDesc.Attribute.Valid.SsNotNullAttribute">
            <summary>
            demo:
            [SsNotNull(path = "http.headers.Authorization",   errorMessage = "必须指定Authorization")]
            </summary>
        </member>
        <member name="T:Sers.SersLoader.ApiDesc.Attribute.Valid.SsRegexAttribute">
            <summary>
            正则限制
            </summary>
        </member>
        <member name="M:Sers.SersLoader.ApiLoader.LoadApi(Newtonsoft.Json.Linq.JObject)">
            <summary>
            调用SsApi加载器加载api
            </summary>
            <param name="config"></param>
            <returns></returns>
        </member>
        <member name="M:Sers.SersLoader.ApiLoader.LoadApi(Sers.SersLoader.ApiLoaderConfig)">
            <summary>
            调用SsApi加载器加载api
            </summary>
            <param name="config"></param>
            <returns></returns>
        </member>
        <member name="M:Sers.SersLoader.ApiLoader.GetApiDesc(System.Reflection.MethodInfo)">
            <summary>
            
            </summary>
            <param name="method"></param>
        </member>
        <member name="M:Sers.SersLoader.ApiLoader.LoadApiNodes(System.Collections.Generic.List{System.String},System.Reflection.MethodInfo,System.Func{Sers.Core.Module.Api.ApiDesc.SsApiDesc})">
            <summary>
            
            </summary>
            <param name="routePrefixs">demo:   ["/Auth/fold1/fold2","/api","/"]</param>   
            <param name="method"></param>
            <param name="CreateApiDesc"></param> 
        </member>
        <member name="P:Sers.SersLoader.ApiLoaderConfig.apiStationName_Force">
            <summary>
            强制指定ApiStation名称。可不指定。（优先级从高到低：  apiStationName_Force 、 在代码上的SsStationNameAttribute特性指定 、 apiStationName 、 appsettings.json指定）
            </summary>
        </member>
        <member name="P:Sers.SersLoader.ApiLoaderConfig.apiStationName">
            <summary>
            ApiStation名称。可不指定。（优先级从高到低：  apiStationName_Force 、 在代码上的SsStationNameAttribute特性指定 、 apiStationName 、 appsettings.json指定）
            </summary>
        </member>
        <member name="P:Sers.SersLoader.ApiLoaderConfig.assembly">
            <summary>
            在此Assembly中查找服务(assembly、assemblyFile、assemblyName 指定任一即可)
            </summary>
        </member>
        <member name="P:Sers.SersLoader.ApiLoaderConfig.assemblyFile">
            <summary>
            在此Assembly中查找服务(如 App.StationDemo.Station.dll)(assembly、assemblyFile、assemblyName 指定任一即可)
            </summary>
        </member>
        <member name="P:Sers.SersLoader.ApiLoaderConfig.assemblyName">
            <summary>
            在此Assembly中查找服务(如 App.StationDemo.Station)(assembly、assemblyFile、assemblyName 指定任一即可)
            </summary>
        </member>
        <member name="P:Sers.SersLoader.ApiLoaderConfig.routePrefix_Force">
            <summary>
            强制路由前缀,例如："demo/v1"。可不指定。（优先级从高到低：  routePrefix_Force、在代码上的SsRoutePrefixAttribute特性指定 、 routePrefix）
            </summary>
        </member>
        <member name="P:Sers.SersLoader.ApiLoaderConfig.routePrefix">
            <summary>
            路由前缀,例如："demo/v1"。可不指定。（优先级从高到低：  routePrefix_Force、在代码上的SsRoutePrefixAttribute特性指定 、 routePrefix ）
            </summary>
        </member>
        <member name="M:Sers.SersLoader.SsModelBuilder.CreateEntityByParameterInfo(System.Reflection.ParameterInfo[],Vit.Core.Util.XmlComment.MethodComment,System.Collections.Generic.List{Sers.Core.Module.Api.ApiDesc.SsModelEntity})">
            <summary>
            
            </summary>
            <param name="infos">length大于0</param>
            <param name="comment"></param>
            <param name="refModels"></param> 
            <returns></returns>
        </member>
        <member name="M:Sers.SersLoader.SsModelBuilder.CreateEntityByType(System.Type,System.Collections.Generic.List{Sers.Core.Module.Api.ApiDesc.SsModelEntity})">
            <summary>
             info mode  可为 array 或 object
            </summary>
            <param name="info"></param>
            <param name="refModels"></param>
            <returns></returns>
        </member>
        <member name="M:Vit.Extensions.SsApiDescExtensions.ServiceKeyGet(Sers.Core.Module.Api.ApiDesc.SsApiDesc)">
            <summary>
            为 route + "_"+  httpMethod
            httpMethod可能为空
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="T:Vit.Extensions.IRpcContextDataExtensions">
            <summary>
            Extension methods for RpcContextData
            </summary>
            <summary>
            Extension methods for RpcContextData
            </summary>
        </member>
        <member name="M:Vit.Extensions.IRpcContextDataExtensions.ValueSetByPath(Sers.Core.Module.Rpc.IRpcContextData,System.Object,System.Object[])">
            <summary>
            
            </summary>
            <param name="data"></param>
            <param name="value"></param>
            <param name="path">value在data中的路径，至少一层，例如：new []{"taskList"}</param>
        </member>
        <member name="M:Vit.Extensions.IRpcContextDataExtensions.StringGetByPath(Sers.Core.Module.Rpc.IRpcContextData,System.Object[])">
            <summary>
            
            </summary>
            <param name="data"></param>
            <param name="path">value在data中的路径，至少一层，例如：new []{"taskList"}</param>
            <returns></returns>
        </member>
        <member name="M:Vit.Extensions.IRpcContextDataExtensions.http_url_Get(Sers.Core.Module.Rpc.IRpcContextData)">
            <summary>
            若为内部调用，在调用时构建的url前缀为  "http://sers.internal"。
            如 "http://sers.internal/Station1/getName"
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:Vit.Extensions.IRpcContextDataExtensions.http_url_Set(Sers.Core.Module.Rpc.IRpcContextData,System.String)">
            <summary>
            若为内部调用，手动添加url前缀 "http://sers.internal"。
            如 "http://sers.internal/Station1/getName"
            </summary>
            <param name="data"></param>
            <param name="url"></param>
        </member>
        <member name="M:Vit.Extensions.IRpcContextDataExtensions.http_url_search_Get(Sers.Core.Module.Rpc.IRpcContextData)">
            <summary>
            获取泛接口 路由 * 实际传递的内容。
            <para>（若 route为"/Station1/fold1/a/*"，url为"http://127.0.0.1/Station1/fold1/a/1/2.html?c=9",则search为"1/2.html?c=9"）</para>
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:Vit.Extensions.IRpcContextDataExtensions.http_url_RelativeUrl_Get(Sers.Core.Module.Rpc.IRpcContextData)">
            <summary>
            获取当前url对应的相对文件路径(若不合法，则返回null)。demo:"rpc/2.html"
            <para>（若 route为"/Station1/fold1/a/*"，url为"http://127.0.0.1/Station1/fold1/a/1/2.html?c=9",则 relativePath为"1/2.html"）</para>
            </summary>
            <returns></returns>
        </member>
        <member name="M:Vit.Extensions.IRpcContextDataExtensions.http_url_RelativePath_Get(Sers.Core.Module.Rpc.IRpcContextData)">
            <summary>
            获取当前url对应的相对文件路径(若不合法，则返回null,会自动转换文件夹分隔符)。demo:"rpc\\2.html"
            <para>（若 route为"/Station1/fold1/a/*"，url为"http://127.0.0.1/Station1/fold1/a/1/2.html?c=9",则 relativePath为"1\\2.html"）</para>
            </summary>
            <returns></returns>
        </member>
        <member name="M:Vit.Extensions.IRpcContextDataExtensions.http_protocol_Get(Sers.Core.Module.Rpc.IRpcContextData)">
            <summary>
            如 "HTTP/2.0"
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:Vit.Extensions.IRpcContextDataExtensions.http_protocol_Set(Sers.Core.Module.Rpc.IRpcContextData,System.String)">
            <summary>
            如 "HTTP/2.0"
            </summary>
            <param name="data"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Vit.Extensions.IRpcContextDataExtensions.http_headers_Get(Sers.Core.Module.Rpc.IRpcContextData)">
            <summary>
            若没指定headers则返回null
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:Vit.Extensions.UseApiTraceLogExtensions.UseApiTraceLog(Sers.Core.Module.Api.LocalApi.Event.LocalApiEventMng)">
            <summary>
            txt log  ("2018-01-01apitrace.log")
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:Vit.Extensions.LocalApiService_StaticFileMap_Extensions.LoadApi_StaticFiles(Sers.Core.Module.Api.LocalApi.LocalApiService)">
            <summary>
            从配置文件（appsettings.json::Sers.LocalApiService.staticFiles）加载静态文件映射器
            </summary>
        </member>
        <member name="T:Vit.Extensions.ECallerSourceExtensions">
            <summary>
            
            </summary>
        </member>
        <member name="M:Vit.Extensions.ApiMessageExtensions.InitAsApiRequestMessage(Sers.Core.Module.Message.ApiMessage,System.String,System.Object,System.String,System.Action{Sers.Core.Module.Rpc.IRpcContextData})">
            <summary>
            
            </summary>
            <param name="apiRequestMessage"></param>
            <param name="url"> /api/cotrollers1/value?name=lith </param>
            <param name="arg"></param>
            <param name="httpMethod">可为 GET、POST、DELETE、PUT等,可不指定</param>
            <param name="InitRpc">对Rpc的额外处理,如添加header</param>
            <returns></returns>
        </member>
    </members>
</doc>
