<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Vit.Core</name>
    </assembly>
    <members>
        <member name="M:Vit.Extensions.ByteDataExtensions.ByteDataPopInt32(System.Collections.Generic.List{System.ArraySegment{System.Byte}})">
            <summary>
            data的长度 必须大于等于4
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:Vit.Extensions.ByteDataExtensions.ByteDataPopBytes(System.Collections.Generic.List{System.ArraySegment{System.Byte}},System.Byte[])">
            <summary>
            data 的长度 必须大于等于 dataToPop 的长度
            </summary>
            <param name="data"></param>
            <param name="dataToPop"></param>
            <returns></returns>
        </member>
        <member name="M:Vit.Extensions.ByteDataExtensions.ByteDataPopByteData(System.Collections.Generic.List{System.ArraySegment{System.Byte}},System.Int32)">
            <summary>
            data 的长度 必须大于等于lenToPop
            </summary>
            <param name="data"></param>
            <param name="lenToPop"></param>
            <returns></returns>
        </member>
        <member name="M:Vit.Extensions.EnumExtensions.StringToEnum``1(System.String)">
            <summary>
            T 必须为Enum
            </summary>
            <typeparam name="T"></typeparam>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:Vit.Extensions.IDictionaryExtensions.IDictionaryTryAdd``2(System.Collections.Generic.IDictionary{``0,``1},``0,``1)">
            <summary>
            
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue"></typeparam>
            <param name="data"></param>
            <param name="key"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:Vit.Extensions.IEnumerable.IEnumerableExtensions">
            <summary>
             
            </summary>
        </member>
        <member name="M:Vit.Extensions.IEnumerable.IEnumerableExtensions.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="data"></param>
            <param name="action"></param>
        </member>
        <member name="M:Vit.Extensions.JArrayExtensions.ToArray(Newtonsoft.Json.Linq.JToken,System.Int64,System.Int64)">
            <summary>
            (注：若jArray不为 JArray类型 则 返回null)
            </summary>
            <param name="jArray"></param>
            <param name="extCount">数组额外长度</param>
            <param name="destinationIndex">开始赋值的位置偏移量，从0开始</param>
            <returns></returns>
        </member>
        <member name="M:Vit.Extensions.JArrayExtensions.ToArray``1(Newtonsoft.Json.Linq.JToken,System.Int64,System.Int64)">
            <summary>
            (注：若jArray不为 JArray类型 则 返回null)
            </summary>
            <param name="jArray"></param>
            <param name="extCount">数组额外长度</param>
            <param name="destinationIndex">开始赋值的位置偏移量，从0开始</param>
            <returns></returns>
        </member>
        <member name="M:Vit.Extensions.JTokenDeserializeExtensions.DeserializeByString(Newtonsoft.Json.Linq.JToken,System.Type)">
            <summary>
            反序列化（token亦可为值类型,如 int、bool、string）
            (先转换为string,再反序列化)
            </summary>
            <param name="token"></param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Vit.Extensions.JTokenDeserializeExtensions.DeserializeByString``1(Newtonsoft.Json.Linq.JToken)">
            <summary>
            反序列化（token亦可为值类型,如 int、bool、string）
            (先转换为string,再反序列化)
            </summary>
            <typeparam name="T"></typeparam>
            <param name="token"></param>
            <returns></returns>
        </member>
        <member name="M:Vit.Extensions.JTokenDeserializeExtensions.Deserialize(Newtonsoft.Json.Linq.JToken,System.Type)">
            <summary>
            反序列化（token亦可为值类型,如 int、bool、string）
            </summary>
            <param name="token"></param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Vit.Extensions.JTokenDeserializeExtensions.DeserializeStruct(Newtonsoft.Json.Linq.JToken,System.Type)">
            <summary>
            
            </summary> 
            <param name="token"></param>
            <param name="type">必须为struct或String</param>
            <returns></returns>
        </member>
        <member name="M:Vit.Extensions.JTokenDeserializeExtensions.DeserializeClass(Newtonsoft.Json.Linq.JToken,System.Type)">
            <summary>
            
            </summary>
            <param name="token"></param>
            <param name="type">必须为class</param>
            <returns></returns>
        </member>
        <member name="M:Vit.Extensions.JTokenDeserializeExtensions.Deserialize``1(Newtonsoft.Json.Linq.JToken)">
            <summary>
            反序列化（token亦可为值类型,如 int、bool、string）
            </summary>
            <typeparam name="T"></typeparam>
            <param name="token"></param>
            <returns></returns>
        </member>
        <member name="M:Vit.Extensions.JTokenExtensions.ValueSetByPath(Newtonsoft.Json.Linq.JToken,System.Object,System.Object[])">
            <summary>
            
            </summary>
            <param name="data"></param>
            <param name="value"></param>
            <param name="path">value在data中的路径，可不指定。例如：new []{"taskList"}</param>
        </member>
        <member name="M:Vit.Extensions.JTokenExtensions.JTokenGetByPath(Newtonsoft.Json.Linq.JToken,System.Object[])">
            <summary>
            
            </summary>
            <param name="data"></param>
            <param name="path">value在data中的路径，可不指定。例如：new []{"taskList"}</param>
            <returns></returns>
        </member>
        <member name="M:Vit.Extensions.JTokenExtensions.StringGetByPath(Newtonsoft.Json.Linq.JToken,System.Object[])">
            <summary>
            
            </summary>
            <param name="data"></param>
            <param name="path">value在data中的路径，可不指定。例如：new []{"taskList"}</param>
            <returns></returns>
        </member>
        <member name="M:Vit.Extensions.JTokenExtensions.ToJToken(System.Object)">
            <summary>
            若为JToken类型，则直接返回。若为Object,则返回序列化再反序列化后的JToken(为 JObject 或 JArray)。否则return new JValue(value)。
            value必须为值类型或者 JToken类型
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Vit.Extensions.JTokenExtensions.IsNull(Newtonsoft.Json.Linq.JToken)">
            <summary>
            是否为 null 或者 类型为JTokenType.Null
            </summary>
            <param name="v"></param>
            <returns></returns>
        </member>
        <member name="M:Vit.Extensions.JTokenExtensions.IsJObject(Newtonsoft.Json.Linq.JToken)">
            <summary>
            是否为 JObject
            </summary>
            <param name="v"></param>
            <returns></returns>
        </member>
        <member name="M:Vit.Extensions.JTokenExtensions.IsJArray(Newtonsoft.Json.Linq.JToken)">
            <summary>
            是否为 JArray
            </summary>
            <param name="v"></param>
            <returns></returns>
        </member>
        <member name="M:Vit.Extensions.JTokenExtensions.GetValue(Newtonsoft.Json.Linq.JToken)">
            <summary>
            返回具体的值。（若t为null则返回null）
            例如 若为 double 则返回其double值
            （JArray、bool、byte[]、DateTime、double、long、JObject、String）
            注：JTokenType.Comment 类型会返回 其 t.ToString()
            其他返回null（JTokenType.None、JTokenType.Null、JTokenType.Undefined 等）。
            </summary>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="M:Vit.Extensions.JTokenExtensions.ConvertToString(Newtonsoft.Json.Linq.JToken)">
            <summary>
            转换为String
            <para>和JToken.ToString不同的是，会处理空值；若JToken为String类型，函数返回值不带双引号</para>
            </summary>
            <param name="token"></param>
            <returns></returns>
        </member>
        <member name="M:Vit.Extensions.JTokenExtensions.TryParse(Newtonsoft.Json.Linq.JToken,Newtonsoft.Json.Linq.JObject@)">
            <summary>
             
            </summary>
            <param name="token"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Vit.Extensions.JTokenExtensions.TryParse(Newtonsoft.Json.Linq.JToken,Newtonsoft.Json.Linq.JArray@)">
            <summary>
             
            </summary>
            <param name="token"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Vit.Extensions.JTokenExtensions.TryParseIgnore(Newtonsoft.Json.Linq.JToken,System.Boolean@)">
            <summary>
             当为 String（必须为true 、 false、True 、False） 时 转换。
            </summary>
            <param name="token"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Vit.Extensions.JTokenExtensions.TryParseIgnore(Newtonsoft.Json.Linq.JToken,System.Int32@)">
            <summary>
             当为 String（必须为数值） double long 类型时 转换。
            </summary>
            <param name="token"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Vit.Extensions.JTokenExtensions.TryParseIgnore(Newtonsoft.Json.Linq.JToken,System.Int64@)">
            <summary>
             当为 String（必须为数值） double long 类型时 转换。
            </summary>
            <param name="token"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Vit.Extensions.JTokenExtensions.TryParseIgnore(Newtonsoft.Json.Linq.JToken,System.Double@)">
            <summary>
             当为 String（必须为数值） double long 类型时 转换。
            </summary>
            <param name="token"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Vit.Extensions.JTokenExtensions.TryParseIgnore(Newtonsoft.Json.Linq.JToken,System.DateTime@)">
            <summary>
            当为 String（必须为DateTime）时 亦转换。
            </summary>
            <param name="token"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Vit.Extensions.JTokenExtensions.EqualIgnore(Newtonsoft.Json.Linq.JToken,System.Boolean)">
            <summary>
            若不为Boolean型，则先转换（若可以转换），再比较
            </summary>
            <param name="token"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Vit.Extensions.JTokenExtensions.EqualIgnore(Newtonsoft.Json.Linq.JToken,System.Int64)">
            <summary>
            若不为long型，则先转换（若可以转换），再比较
            </summary>
            <param name="token"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Vit.Extensions.JTokenExtensions.EqualIgnore(Newtonsoft.Json.Linq.JToken,System.String)">
            <summary>
            若不为字符串，则先转换为字符串再进行比较
            </summary>
            <param name="token"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Vit.Extensions.ObjectExtensions.IsValueTypeOrStringType(System.Object)">
            <summary>
            Gets a value indicating whether the data is a value type or string type
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:Vit.Extensions.ObjectExtensions.Convert``1(System.Object)">
            <summary>
            若Type为Nullable类型（例如 long?）则转换为对应的值类型(例如long)，否则直接转换。
            若转换失败，会返回default(T)
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Vit.Extensions.ObjectExtensions.Convert(System.Object,System.Type)">
            <summary>
            若为Nullable类型（例如 long?）则转换为对应的值类型(例如long)，否则直接转换。
            </summary>
            <param name="type"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Vit.Extensions.ObjectExt.ObjectExtExtensions.CopyProrertyFrom``1(``0,System.Object)">
            <summary>
            通过反射复制对象的同名属性
            </summary>
            <typeparam name="T"></typeparam>
            <param name="data"></param>
            <param name="res"></param>
            <returns></returns>
        </member>
        <member name="M:Vit.Extensions.ObjectExt.ObjectExtExtensions.CopyNotNullProrertyFrom``1(``0,System.Object)">
            <summary>
            通过反射复制对象的非空同名属性
            </summary>
            <typeparam name="T"></typeparam>
            <param name="data"></param>
            <param name="res"></param>
            <returns></returns>
        </member>
        <member name="M:Vit.Extensions.ObjectExt.ObjectExtExtensions.GetField``1(System.Object,System.String)">
            <summary>
            获得字段的值(包含私有)
            </summary>
            <typeparam name="T">返回类型</typeparam>
            <param name="instance">扩展对象类型</param>
            <param name="fieldName">私有字段名称 string</param>
            <returns>私有字段值 T</returns>
        </member>
        <member name="M:Vit.Extensions.ObjectExt.ObjectExtExtensions.SetField(System.Object,System.String,System.Object)">
            <summary>
            设置字段的值(包含私有)
            </summary>
            <param name="instance"></param>
            <param name="fieldname">字段名称 string</param>
            <param name="value">私有字段新值 object</param>
        </member>
        <member name="M:Vit.Extensions.ObjectExt.ObjectExtExtensions.GetProperty(System.Object,System.String)">
            <summary>
            获取属性的值(包含私有)
            </summary>
            <param name="instance"></param>
            <param name="propertyName">属性名称 string</param>
            <returns>私有字段值 T</returns>
        </member>
        <member name="M:Vit.Extensions.ObjectExt.ObjectExtExtensions.GetProperty``1(System.Object,System.String)">
            <summary>
            获取属性的值(包含私有)
            </summary>
            <typeparam name="T">返回类型</typeparam>
            <param name="instance"></param>
            <param name="propertyName">属性名称 string</param>
            <returns>私有字段值 T</returns>
        </member>
        <member name="M:Vit.Extensions.ObjectExt.ObjectExtExtensions.SetProperty(System.Object,System.String,System.Object)">
            <summary>
            设置属性的值(包含私有)
            </summary>
            <param name="instance"></param>
            <param name="propertyName">属性名称</param>
            <param name="value"></param>
        </member>
        <member name="M:Vit.Extensions.ObjectExt.ObjectExtExtensions.CallMethod``1(System.Object,System.String,System.Object[])">
            <summary>
            调用方法(包含私有)
            </summary>
            <typeparam name="T">返回类型</typeparam>
            <param name="instance"></param>
            <param name="methodName">方法名称</param>
            <param name="param">参数列表</param>
            <returns>调用方法返回值</returns>
        </member>
        <member name="M:Vit.Extensions.TypeExtensions.IsStringType(System.Type)">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Type"></see> is  string type
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Vit.Extensions.TypeExtensions.TypeIsValueTypeOrStringType(System.Type)">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Type"></see> is a value type or string type
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Vit.Extensions.TypeExtensions.GetUnderlyingTypeIfNullable(System.Type)">
            <summary>
            若为Nullable类型（例如 long?）则获取对应的值类型(例如long)，否则返回自身。
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Vit.Extensions.TypeExtensions.DefaultValue(System.Type)">
            <summary>
            功能类似 default(T)
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Vit.Extensions.ObjectSerializeExtensions.Serialize(System.Object)">
            <summary>
            使用Newtonsoft序列化。
            value 可为 struct(int bool string 等) 或者 class（模型 Array JObject等）
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Vit.Extensions.ObjectSerializeExtensions.Deserialize(System.String,System.Type)">
            <summary>
            使用Newtonsoft反序列化。T也可为值类型（例如 int?、bool） 
            </summary>
            <param name="value"></param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Vit.Extensions.ObjectSerializeExtensions.Deserialize``1(System.String)">
            <summary>
            使用Newtonsoft反序列化。T也可为值类型（例如 int?、bool） 
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Vit.Extensions.ObjectSerializeExtensions.SerializeToBytes(System.Object)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Vit.Extensions.ObjectSerializeExtensions.DeserializeFromBytes``1(System.Byte[])">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Vit.Extensions.ObjectSerializeExtensions.DeserializeFromBytes(System.Byte[],System.Type)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Vit.Extensions.ObjectSerializeExtensions.SerializeToArraySegmentByte(System.Object)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Vit.Extensions.ObjectSerializeExtensions.DeserializeFromArraySegmentByte``1(System.ArraySegment{System.Byte})">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Vit.Extensions.ObjectSerializeExtensions.DeserializeFromArraySegmentByte(System.ArraySegment{System.Byte},System.Type)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Vit.Extensions.ObjectSerializeExtensions.ConvertBySerialize(System.Object,System.Type)">
            <summary>
            通过序列化克隆对象
            </summary>
            <param name="value"></param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Vit.Extensions.ObjectSerializeExtensions.ConvertBySerialize``1(System.Object)">
            <summary>
            通过序列化克隆对象
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Vit.Extensions.ExceptionExtensions.Data_Set``1(System.Exception,System.String,``0)">
            <summary>
            SsError
            </summary>
            <typeparam name="Type"></typeparam>
            <param name="ex"></param>
            <param name="key"></param>
            <param name="data"></param>
        </member>
        <member name="M:Vit.Extensions.ExceptionExtensions.Data_Get``1(System.Exception,System.String)">
            <summary>
            SsError
            </summary>
            <typeparam name="Type"></typeparam>
            <param name="ex"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Vit.Extensions.ExceptionExtensions.ErrorCode_Set(System.Exception,System.Nullable{System.Int32})">
            <summary>
            SsError
            </summary>
            <param name="ex"></param>
            <param name="ErrorCode"></param>
            <returns></returns>
        </member>
        <member name="M:Vit.Extensions.ExceptionExtensions.ErrorCode_Get(System.Exception)">
            <summary>
            SsError
            </summary>
            <param name="ex"></param>
            <returns></returns>
        </member>
        <member name="M:Vit.Extensions.ExceptionExtensions.ErrorMessage_Set(System.Exception,System.String)">
            <summary>
            SsError
            </summary>
            <param name="ex"></param>
            <param name="ErrorMessage"></param>
            <returns></returns>
        </member>
        <member name="M:Vit.Extensions.ExceptionExtensions.ErrorTag_Set(System.Exception,System.String)">
            <summary>
            SsError。自定义ErrorTag。每处ErrorTag建议唯一。建议格式为 日期_作者缩写_自定义序号，例如："150721_lith_1"
            </summary>
            <param name="ex"></param>
            <param name="ErrorTag"></param>
        </member>
        <member name="M:Vit.Extensions.ExceptionExtensions.ErrorTag_Get(System.Exception)">
            <summary>
            SsError。自定义ErrorTag。每处ErrorTag建议唯一。建议格式为 日期_作者缩写_自定义序号，例如："150721_lith_1"
            </summary>
            <param name="ex"></param>
            <returns></returns>
        </member>
        <member name="M:Vit.Extensions.ExceptionExtensions.ErrorDetail_Set(System.Exception,Newtonsoft.Json.Linq.JObject)">
            <summary>
            SsError。设置ErrorDetail
            </summary>
            <param name="ex"></param>
            <param name="ErrorDetail"></param>
        </member>
        <member name="M:Vit.Extensions.ExceptionExtensions.ErrorDetail_Get(System.Exception)">
            <summary>
            SsError。获取ErrorDetail，可能为null
            </summary>
            <param name="ex"></param>
            <returns></returns>
        </member>
        <member name="M:Vit.Extensions.ExceptionExtensions.ErrorDetail_Set(System.Exception,System.String,System.Object)">
            <summary>
            SsError。设置ErrorDetail的属性值。若ErrorDetail为null,则会自动创建
            </summary>
            <param name="ex"></param>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:Vit.Extensions.ExceptionExtensions.ErrorDetail_Get(System.Exception,System.String)">
            <summary>
            SsError。获取ErrorDetail的属性值
            </summary>
            <param name="ex"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Vit.Extensions.ExceptionExtensions.SsError_Set(System.Exception,Vit.Core.Util.ComponentModel.SsError.SsError)">
            <summary>
            SsError
            </summary>
            <param name="ex"></param>
            <param name="ssError"></param>
            <returns></returns>
        </member>
        <member name="M:Vit.Extensions.ExceptionExtensions.ToSsError(System.Exception)">
            <summary>
            SsError
            </summary>
            <param name="ex"></param>
            <returns></returns>
        </member>
        <member name="M:Vit.Extensions.SsErrorExtensions.ToException(Vit.Core.Util.ComponentModel.SsError.SsError,System.String)">
            <summary>
            error可为null（若为null,则返回空Exception）
            </summary>
            <param name="error"></param>
            <param name="message"></param>
            <returns></returns>
        </member>
        <member name="T:Vit.Core.Module.Log.Level">
            <summary>
            FATAL > ERROR > WARN > INFO > DEBUG 
            </summary>
        </member>
        <member name="T:Vit.Core.Module.Log.Logger">
            <summary>
            FATAL > ERROR > WARN > INFO > DEBUG 
            </summary>
        </member>
        <member name="P:Vit.Core.Module.Log.Logger.OnLog">
            <summary>
             例如    (level, msg)=> { Console.WriteLine("[" + level + "]" + DateTime.Now.ToString("[HH:mm:ss.ffff]") + msg);   };
            </summary>
        </member>
        <member name="M:Vit.Core.Module.Log.Logger.Debug(System.String)">
            <summary>
            DEBUG （调试信息）：记录系统用于调试的一切信息，内容或者是一些关键数据内容的输出
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:Vit.Core.Module.Log.Logger.Info(System.String)">
            <summary>
            INFO（一般信息）：记录系统运行中应该让用户知道的基本信息。例如，服务开始运行，功能已经开户等。
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:Vit.Core.Module.Log.Logger.Error(System.String)">
            <summary>
            ERROR（一般错误）：记录系统中出现的导致系统不稳定，部分功能出现混乱或部分功能失效一类的错误。例如，数据字段为空，数据操作不可完成，操作出现异常等。
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:Vit.Core.Module.Log.Logger.Error(System.Exception)">
            <summary>
            ERROR（一般错误）：记录系统中出现的导致系统不稳定，部分功能出现混乱或部分功能失效一类的错误。例如，数据字段为空，数据操作不可完成，操作出现异常等。
            </summary>
            <param name="ex"></param>
        </member>
        <member name="M:Vit.Core.Module.Log.Logger.Error(System.String,System.Exception)">
            <summary>
            ERROR（一般错误）：记录系统中出现的导致系统不稳定，部分功能出现混乱或部分功能失效一类的错误。例如，数据字段为空，数据操作不可完成，操作出现异常等。
            </summary> 
            <param name="message"></param>
            <param name="ex"></param>
        </member>
        <member name="M:Vit.Core.Module.Log.Logger.Error(Vit.Core.Util.ComponentModel.SsError.SsError)">
            <summary>
            
            </summary>
            <param name="ssError"></param>
        </member>
        <member name="M:Vit.Core.Module.Log.Logger.Error(System.String,Vit.Core.Util.ComponentModel.SsError.SsError)">
            <summary>
            ERROR（一般错误）：记录系统中出现的导致系统不稳定，部分功能出现混乱或部分功能失效一类的错误。例如，数据字段为空，数据操作不可完成，操作出现异常等。
            </summary>
            <param name="message"></param>
            <param name="ssError"></param>
        </member>
        <member name="T:Vit.Core.Module.Log.LogMng">
            <summary>
            FATAL > ERROR > WARN > INFO > DEBUG 
            </summary>
        </member>
        <member name="F:Vit.Core.Module.Log.LogMng.LogFilePathCache.BasePath">
            <summary>
            /Logs
            </summary>
        </member>
        <member name="P:Vit.Core.Module.Log.LogMng.BasePath">
            <summary>
            log的BasePath
            </summary>
        </member>
        <member name="F:Vit.Core.Module.Log.LogMng.OnLog">
            <summary>
             例如    (level, msg)=> { Console.WriteLine("[" + level + "]" + DateTime.Now.ToString("[HH:mm:ss.ffff]") + msg);   };
            </summary>
        </member>
        <member name="M:Vit.Core.Module.Log.LogMng.Debug(System.String)">
            <summary>
            DEBUG （调试信息）：记录系统用于调试的一切信息，内容或者是一些关键数据内容的输出
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:Vit.Core.Module.Log.LogMng.Info(System.String)">
            <summary>
            INFO（一般信息）：记录系统运行中应该让用户知道的基本信息。例如，服务开始运行，功能已经开户等。
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:Vit.Core.Module.Log.LogMng.Error(System.String)">
            <summary>
            ERROR（一般错误）：记录系统中出现的导致系统不稳定，部分功能出现混乱或部分功能失效一类的错误。例如，数据字段为空，数据操作不可完成，操作出现异常等。
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:Vit.Core.Module.Log.LogMng.Error(System.Exception)">
            <summary>
            ERROR（一般错误）：记录系统中出现的导致系统不稳定，部分功能出现混乱或部分功能失效一类的错误。例如，数据字段为空，数据操作不可完成，操作出现异常等。
            </summary>
            <param name="ex"></param>
        </member>
        <member name="M:Vit.Core.Module.Log.LogMng.Error(System.String,System.Exception)">
            <summary>
            ERROR（一般错误）：记录系统中出现的导致系统不稳定，部分功能出现混乱或部分功能失效一类的错误。例如，数据字段为空，数据操作不可完成，操作出现异常等。
            </summary> 
            <param name="message"></param>
            <param name="ex"></param>
        </member>
        <member name="M:Vit.Core.Module.Log.LogMng.Error(Vit.Core.Util.ComponentModel.SsError.SsError)">
            <summary>
            
            </summary>
            <param name="ssError"></param>
        </member>
        <member name="M:Vit.Core.Module.Log.LogMng.Error(System.String,Vit.Core.Util.ComponentModel.SsError.SsError)">
            <summary>
            ERROR（一般错误）：记录系统中出现的导致系统不稳定，部分功能出现混乱或部分功能失效一类的错误。例如，数据字段为空，数据操作不可完成，操作出现异常等。
            </summary>
            <param name="message"></param>
            <param name="ssError"></param>
        </member>
        <member name="T:Vit.Core.Module.Serialization.EEncoding">
            <summary>
            序列化字符编码。默认 UTF8。只可为 UTF7,UTF8,UTF32,ASCII,Unicode。
            </summary>
        </member>
        <member name="F:Vit.Core.Module.Serialization.Serialization.Serialize_DateTimeFormat">
            <summary>
            时间序列化格式。例如 "yyyy-MM-dd HH:mm:ss"
            </summary>
        </member>
        <member name="M:Vit.Core.Module.Serialization.Serialization.SetDateTimeFormat(System.String)">
            <summary>
            设置时间序列化格式。例如 "yyyy-MM-dd HH:mm:ss"
            </summary>
            <param name="DateTimeFormat"></param>
        </member>
        <member name="M:Vit.Core.Module.Serialization.Serialization.InitByAppSettings">
            <summary>
            根据配置文件（appsettings.json）初始化序列化配置
            </summary>
        </member>
        <member name="M:Vit.Core.Module.Serialization.Serialization.DeserializeFromString(System.String,System.Type)">
            <summary>
            使用Newtonsoft反序列化。T也可为值类型（例如 int?、bool） 
            </summary>
            <param name="value"></param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Vit.Core.Module.Serialization.Serialization.DeserializeFromString``1(System.String)">
            <summary>
            使用Newtonsoft反序列化。T也可为值类型（例如 int?、bool） 
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Vit.Core.Module.Serialization.Serialization.DeserializeStruct(System.String,System.Type)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <param name="type">必须为 where T : struct</param>
            <returns></returns>
        </member>
        <member name="M:Vit.Core.Module.Serialization.Serialization.DeserializeClass(System.String,System.Type)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <param name="type"> 必须为 where T : class </param>
            <returns></returns>
        </member>
        <member name="M:Vit.Core.Module.Serialization.Serialization.SerializeToBytes(System.Object)">
            <summary>
            obj 可以为   byte[]、string、 object       
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Vit.Core.Module.Serialization.Serialization.SerializeToArraySegmentByte(System.Object)">
            <summary>
            obj 可以为   byte[]、string、 object       
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Vit.Core.Module.Serialization.Serialization.ConvertBySerialize(System.Object,System.Type)">
            <summary>
            通过序列化克隆对象
            </summary>
            <param name="value"></param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Vit.Core.Module.Serialization.Serialization.ConvertBySerialize``1(System.Object)">
            <summary>
            通过序列化克隆对象
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Vit.Core.Util.Common.CommonHelp.GetAbsPath(System.String[])">
            <summary>            
            <para> 构建绝对路径。                                                                                       </para> 
            <para> path可为相对路径或绝对路径，若为绝对路径则忽略程序当前路径。                                         </para>
            <para> demo: ["Data","Sers","Gover", "Counter.json"],将返回 /root/netapp/xxxx/Data/Sers/Gover/Counter.json  </para>
            <para>   ["/Data","Sers","Gover", "Counter.json"],将返回 /Data/Sers/Gover/Counter.json                      </para>
            <para>   ["D:\Program Files\Counter.json"],将返回 "D:\Program Files\Counter.json"                           </para>
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:Vit.Core.Util.Common.CommonHelp.NewGuid">
            <summary>
            获取guid。如："1f3c6041c68f4ab3ae19f66f541e3209"
            </summary>
            <returns></returns>
        </member>
        <member name="M:Vit.Core.Util.Common.CommonHelp.Random(System.Int32,System.Int32)">
            <summary>
            返回随机数
            </summary>
            <param name="minValue"></param>
            <param name="maxValue"></param>
            <returns></returns>
        </member>
        <member name="M:Vit.Core.Util.Common.CommonHelp.MD5(System.String)">
            <summary>
            MD5加密字符串（32位大写）
            </summary>
            <param name="source">源字符串</param>
            <returns>加密后的字符串</returns>
        </member>
        <member name="T:Vit.Core.Util.ComponentModel.Api.SsArgEntityAttribute">
            <summary>
            标识函数第一个参数为Api的参数实体。（忽略其他参数(若存在)，调用函数时其他参数(若存在)为空）
            </summary>
        </member>
        <member name="T:Vit.Core.Util.ComponentModel.Api.SsArgPropertyAttribute">
            <summary>
            标识函数第一个参数为Api的参数实体的属性之一。（一般放置在第一个参数上，代表第一个参数不为参数实体）
            </summary>
        </member>
        <member name="T:Vit.Core.Util.ComponentModel.Api.SsRouteAttribute">
            <summary>
            <para>可同时指定多个。                                                                                     </para>
            <para>若以"/"开始则为绝对路径（忽略SsStationName和SsRoutePrefix，如 /demo/v1/api/1/route/3）               </para>
            <para>若以"/*"结尾则代表泛接口，可处理所有路由前缀相同的请求，如 1/route/4/* 会处理请求 1/route/4/a.html   </para>
            <para>demo "api/1/route/3"                                                                                 </para>
            </summary>
        </member>
        <member name="P:Vit.Core.Util.ComponentModel.Api.SsRouteAttribute.Value">
            <summary>
            demo "fold1/fold2"
            </summary>
        </member>
        <member name="P:Vit.Core.Util.ComponentModel.Api.SsRouteAttribute.HttpMethod">
            <summary>
            demo: GET、POST、DELETE、PUT ......
            </summary>
        </member>
        <member name="M:Vit.Core.Util.ComponentModel.Api.SsRouteAttribute.#ctor(System.String)">
            <summary>
            demo "fold1/fold2"
            </summary>
            <param name="Value"></param>
        </member>
        <member name="T:Vit.Core.Util.ComponentModel.Api.SsRoutePrefixAttribute">
            <summary>
            路由前缀,例如："demo/v1"
            </summary>
        </member>
        <member name="P:Vit.Core.Util.ComponentModel.Api.SsRoutePrefixAttribute.Value">
            <summary>
            
            </summary>
        </member>
        <member name="T:Vit.Core.Util.ComponentModel.Api.SsStationNameAttribute">
            <summary>
            站点名称。例如："AuthCenter"
            </summary>
        </member>
        <member name="P:Vit.Core.Util.ComponentModel.Api.SsStationNameAttribute.Value">
            <summary>
            
            </summary>
        </member>
        <member name="M:Vit.Core.Util.ComponentModel.Data.ApiReturn.#ctor">
            <summary>
            构建成功的返回数据
            </summary>
        </member>
        <member name="M:Vit.Core.Util.ComponentModel.Data.ApiReturn.#ctor(System.Nullable{System.Int32},System.String,System.String,Newtonsoft.Json.Linq.JObject)">
            <summary>
            构造失败的返回数据
            </summary>
            <param name="errorCode"></param>
            <param name="errorMessage"></param>
            <param name="errorTag">自定义ErrorTag格式。每处ErrorTag建议唯一。建议格式为 日期_作者缩写_自定义序号，例如："150721_lith_1"</param>
            <param name="errorDetail"></param>
        </member>
        <member name="F:Vit.Core.Util.ComponentModel.Data.ApiReturn.success">
            <summary>
            是否成功
            </summary>
        </member>
        <member name="F:Vit.Core.Util.ComponentModel.Data.ApiReturn.error">
            <summary>
            错误信息
            </summary>
        </member>
        <member name="M:Vit.Core.Util.ComponentModel.Data.ApiReturn.op_Implicit(Vit.Core.Util.ComponentModel.SsError.SsError)~Vit.Core.Util.ComponentModel.Data.ApiReturn">
            <summary>
            
            </summary>
            <param name="error"></param>
        </member>
        <member name="M:Vit.Core.Util.ComponentModel.Data.ApiReturn.op_Implicit(System.Boolean)~Vit.Core.Util.ComponentModel.Data.ApiReturn">
            <summary>
            
            </summary>
            <param name="success"></param>
        </member>
        <member name="F:Vit.Core.Util.ComponentModel.Data.ApiReturn`1.data">
            <summary>
            数据
            </summary>
        </member>
        <member name="M:Vit.Core.Util.ComponentModel.Data.ApiReturn`1.op_Implicit(`0)~Vit.Core.Util.ComponentModel.Data.ApiReturn{`0}">
            <summary>
            隐式转换
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Vit.Core.Util.ComponentModel.Data.ApiReturn`1.op_Implicit(Vit.Core.Util.ComponentModel.SsError.SsError)~Vit.Core.Util.ComponentModel.Data.ApiReturn{`0}">
            <summary>
            
            </summary>
            <param name="error"></param>
        </member>
        <member name="M:Vit.Core.Util.ComponentModel.Data.ApiReturn`1.op_Implicit(System.Boolean)~Vit.Core.Util.ComponentModel.Data.ApiReturn{`0}">
            <summary>
            
            </summary>
            <param name="success"></param>
        </member>
        <member name="F:Vit.Core.Util.ComponentModel.Data.PageData`1.rows">
            <summary>
            数据
            </summary>
        </member>
        <member name="F:Vit.Core.Util.ComponentModel.Data.PageData`1.totalCount">
            <summary>
            总数据个数
            </summary>
        </member>
        <member name="F:Vit.Core.Util.ComponentModel.Data.PageInfo.pageSize">
            <summary>
            每页数据条数
            </summary>
        </member>
        <member name="F:Vit.Core.Util.ComponentModel.Data.PageInfo.pageIndex">
            <summary>
            页码，从1开始
            </summary>
        </member>
        <member name="T:Vit.Core.Util.ComponentModel.Model.SsDefaultValueAttribute">
            <summary>
            默认值
            </summary>
        </member>
        <member name="T:Vit.Core.Util.ComponentModel.Model.SsDescriptionAttribute">
            <summary>
            描述
            </summary>
        </member>
        <member name="T:Vit.Core.Util.ComponentModel.Model.SsExampleAttribute">
            <summary>
            参考值
            </summary>
        </member>
        <member name="T:Vit.Core.Util.ComponentModel.Model.SsNameAttribute">
            <summary>
            名称
            </summary> 
        </member>
        <member name="P:Vit.Core.Util.ComponentModel.Model.SsNameAttribute.Value">
            <summary>
            名称
            </summary>
        </member>
        <member name="F:Vit.Core.Util.ComponentModel.Query.SortItem.field">
            <summary>
            字段名(可多级，例如 "parent.name")
            </summary>
        </member>
        <member name="F:Vit.Core.Util.ComponentModel.Query.SortItem.asc">
            <summary>
            是否为正向排序
            </summary>
        </member>
        <member name="F:Vit.Core.Util.ComponentModel.SsError.SsError.Err_SysErr">
            <summary>
            100 系统出错
            </summary>
        </member>
        <member name="F:Vit.Core.Util.ComponentModel.SsError.SsError.Err_ApiNotExists">
            <summary>
            101 请求的api不存在
            </summary>
        </member>
        <member name="F:Vit.Core.Util.ComponentModel.SsError.SsError.Err_Timeout">
            <summary>
            102 请求超时
            </summary>
        </member>
        <member name="F:Vit.Core.Util.ComponentModel.SsError.SsError.Err_HandleTimeout">
            <summary>
            103 操作超时被强制中断
            </summary>
        </member>
        <member name="F:Vit.Core.Util.ComponentModel.SsError.SsError.Err_RateLimit_Refuse">
            <summary>
            110 服务限流限制
            </summary>
        </member>
        <member name="F:Vit.Core.Util.ComponentModel.SsError.SsError.Err_InvalidParam">
            <summary>
            120 请求参数不合法
            </summary>
        </member>
        <member name="F:Vit.Core.Util.ComponentModel.SsError.SsError.Err_404">
            <summary>
            404 404 Not Found：请求资源不存在
            </summary>
        </member>
        <member name="F:Vit.Core.Util.ComponentModel.SsError.SsError.Err_NotAllowed">
            <summary>
            405 权限限制(没有权限)
            </summary>
        </member>
        <member name="M:Vit.Core.Util.ComponentModel.SsError.SsError.#ctor(System.Nullable{System.Int32},System.String,System.String,Newtonsoft.Json.Linq.JObject)">
            <summary>
            
            </summary>
            <param name="errorCode"></param>
            <param name="errorMessage"></param>
            <param name="errorTag">自定义ErrorTag格式。每处ErrorTag建议唯一。建议格式为 日期_作者缩写_自定义序号，例如："150721_lith_1"</param>
            <param name="errorDetail"></param>
        </member>
        <member name="P:Vit.Core.Util.ComponentModel.SsError.SsError.errorCode">
            <summary>
            
            </summary>
        </member>
        <member name="P:Vit.Core.Util.ComponentModel.SsError.SsError.errorMessage">
            <summary>
            
            </summary>
        </member>
        <member name="P:Vit.Core.Util.ComponentModel.SsError.SsError.errorTag">
            <summary>
            自定义ErrorTag格式。每处ErrorTag建议唯一。建议格式为 日期_作者缩写_自定义序号，例如："150721_lith_1"
            </summary>
        </member>
        <member name="P:Vit.Core.Util.ComponentModel.SsError.SsError.errorDetail">
            <summary>
            错误详情（json类型）
            </summary>
        </member>
        <member name="F:Vit.Core.Util.ComponentModel.SsError.SsException.Event_OnCreateException">
            <summary>
            可添加自定义事件。如当异常创建时 自动记录日志。
            </summary>
        </member>
        <member name="P:Vit.Core.Util.ConfigurationManager.ConfigurationManager.Instance">
            <summary>
            获取appsettings.json中的配置
            </summary>
        </member>
        <member name="M:Vit.Core.Util.ConfigurationManager.JsonFile.SetToFile(System.Object,System.String[],System.String[])">
            <summary>
            
            </summary>
            <param name="value">要保存的数据</param>
            <param name="filePath">json文件路径，例如：new []{"Data", "App.Robot.json"}</param>
            <param name="valueKeys">value在json文件中的json路径，可为null。例如：new []{"taskList"}</param>
        </member>
        <member name="M:Vit.Core.Util.ConfigurationManager.JsonFile.GetFromFile``1(System.String[],System.String[])">
            <summary>
            若失败则返回空
            </summary>
            <typeparam name="T"></typeparam>
            <param name="filePath">json文件路径，例如：new []{"Data", "App.Robot.json"}</param>
            <param name="valueKeys">value在json文件中的json路径，可为null。例如：new []{"taskList"}</param>
            <returns></returns>
        </member>
        <member name="M:Vit.Core.Util.ConfigurationManager.JsonFile.#ctor(System.String)">
            <summary>
            通过绝对路径(或相对路径)加载json文件
            </summary>
            <param name="configPath"></param>
        </member>
        <member name="M:Vit.Core.Util.ConfigurationManager.JsonFile.#ctor(System.String[])">
            <summary>
            通过相对路径加载json文件
            </summary>
            <param name="path">如： new []{"Data","sqler.json"}</param>
        </member>
        <member name="M:Vit.Core.Util.ConfigurationManager.JsonFile.RefreshConfiguration">
            <summary>
            手动刷新配置，修改配置后，请手动调用此方法，以便更新配置参数
            </summary>
        </member>
        <member name="M:Vit.Core.Util.ConfigurationManager.JsonFile.SaveToFile">
            <summary>
            保存到原始json文件
            </summary>
        </member>
        <member name="M:Vit.Core.Util.ConfigurationManager.JsonFile.Get``1(System.Object[])">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="keys">value在Root中的json路径，可为null。例如：new []{"taskList",0,"name"}</param>
            <returns></returns>
        </member>
        <member name="M:Vit.Core.Util.ConfigurationManager.JsonFile.Set(System.Object,System.Object[])">
            <summary>
            会自动保存到原始json文件
            </summary>
            <param name="value"></param>
            <param name="keys">value在Root中的json路径，可为null。例如：new []{"taskList",0,"name"}</param>
        </member>
        <member name="M:Vit.Core.Util.ConfigurationManager.JsonFile.GetByPath``1(System.String)">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="path">value在Root中的json路径，可为null。例如："a.b.c"</param>
            <returns></returns>
        </member>
        <member name="M:Vit.Core.Util.ConfigurationManager.JsonFile.SetByPath(System.Object,System.String)">
            <summary>
            会自动保存到原始json文件
            </summary>
            <param name="value"></param>
            <param name="path">value在Root中的json路径，可为null。例如："a.b.c"</param>
        </member>
        <member name="T:Vit.Core.Util.Dynamic.DynamicMethodExecutor">
            <summary>
             
            </summary>
        </member>
        <member name="T:Vit.Core.Util.Extensible.Extensible">
            <summary>
            可动态扩展属性，但是序列化时不处理动态扩展属性
            </summary>
        </member>
        <member name="M:Vit.Core.Util.Extensible.Extensible.SetData``1(System.String,``0)">
            <summary>
            Extensible
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:Vit.Core.Util.Extensible.Extensible.GetData``1(System.String)">
            <summary>
            Extensible。若类型不匹配，则返回默认值（default(T)）
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Vit.Core.Util.Extensible.Extensible.GetDataByConvert``1(System.String)">
            <summary>
            Extensible。若类型不匹配，则通过Convert转换。若转换不通过，则返回默认值（default(T)）
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Vit.Core.Util.Extensible.Extensible.GetDataBySerialize``1(System.String)">
            <summary>
            Extensible。若类型不匹配，则通过Serialize转换。若转换不通过，则返回默认值（default(T)）
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="T:Vit.Core.Util.Guid.Snowflake">
            <summary>
            动态生产有规律的ID Snowflake算法是Twitter的工程师为实现递增而不重复的ID实现的
            http://blog.csdn.net/w200221626/article/details/52064976
            C# 实现 Snowflake算法 
            </summary>
        </member>
        <member name="M:Vit.Core.Util.Guid.Snowflake.SetMachineId(System.Int64)">
            <summary>
            5位(0~31)
            </summary>
            <param name="machineId"></param>
        </member>
        <member name="M:Vit.Core.Util.Guid.Snowflake.SetDatacenterId(System.Int64)">
            <summary>
            5位(0~31)
            </summary>
            <param name="datacenterId"></param>
        </member>
        <member name="M:Vit.Core.Util.Guid.Snowflake.GetTimestamp">
            <summary>
            生成当前时间戳
            </summary>
            <returns>毫秒</returns>
        </member>
        <member name="M:Vit.Core.Util.Guid.Snowflake.GetNextTimestamp(System.Int64)">
            <summary>
            获取下一微秒时间戳
            </summary>
            <param name="lastTimestamp"></param>
            <returns></returns>
        </member>
        <member name="M:Vit.Core.Util.Guid.Snowflake.GetId">
            <summary>
            获取长整形的ID
            </summary>
            <returns></returns>
        </member>
        <member name="M:Vit.Core.Util.Net.HttpClient.SendAsync``1(Vit.Core.Util.Net.HttpRequest)">
            <summary>
            异步发送请求
            </summary>
            <typeparam name="T"></typeparam>
            <param name="request"></param>
            <returns></returns>
        </member>
        <member name="M:Vit.Core.Util.Net.HttpClient.UrlAddParams(System.String,System.Object)">
            <summary>
            
            </summary>
            <param name="url">不可为null,demo："http://www.a.com"、"http://www.a.com?a=1&amp;b=2"</param>
            <param name="parameters">可为string、IDictionary、JObject</param>
            <returns></returns>
        </member>
        <member name="M:Vit.Core.Util.Net.HttpClient.UrlEncode(System.String)">
            <summary>
             System.Web.HttpUtility.UrlEncode(param)
            </summary>
            <param name="param"></param>
            <returns></returns>
        </member>
        <member name="M:Vit.Core.Util.Net.HttpClient.FormatUrlParams(System.Object)">
            <summary>
            返回值demo： "a=4&amp;b=2"
            </summary>
            <param name="parameters">可为string、IDictionary、JObject,例如："a=3&amp;b=5"</param>
            <returns></returns>
        </member>
        <member name="M:Vit.Core.Util.Net.HttpClient.Send``1(Vit.Core.Util.Net.HttpRequest)">
            <summary>
            发送请求
            </summary>
            <typeparam name="ReturnType"></typeparam>
            <param name="request"></param>
            <returns></returns>
        </member>
        <member name="T:Vit.Core.Util.Net.HttpRequest">
            <summary>
            http(s)的请求数据
            </summary>
        </member>
        <member name="F:Vit.Core.Util.Net.HttpRequest.url">
            <summary>
            可为https请求。例如： "http://www.baidu.com" "https://api.253.com/open/i/ocr/id-ocr" "/api/getName"
            </summary>
        </member>
        <member name="F:Vit.Core.Util.Net.HttpRequest.httpMethod">
            <summary>
            "GET"、"POST"、"DELETE" 等，默认"GET"
            </summary>
        </member>
        <member name="F:Vit.Core.Util.Net.HttpRequest.urlParams">
            <summary>
            放到url中的参数。可为string、IDictionary、JObject。若为其他类型则自动转换为JObject在进行处理
            </summary>
        </member>
        <member name="F:Vit.Core.Util.Net.HttpRequest.body">
            <summary>
            请求正文。可为 byte[]、IDictionary、JObject/JArray/Object 等(除了byte[], requestContentType 强制为 "application/json")
            </summary>
        </member>
        <member name="F:Vit.Core.Util.Net.HttpRequest.headers">
            <summary>
            http 请求头（可不指定，一般存放 Authorization Content-Type 等）
            </summary>
        </member>
        <member name="F:Vit.Core.Util.Net.HttpRequest._requestEncoding">
            <summary>
            
            </summary>
        </member>
        <member name="P:Vit.Core.Util.Net.HttpRequest.requestEncoding">
            <summary>
            请求编码
            </summary>
        </member>
        <member name="T:Vit.Core.Util.Net.HttpResponse`1">
            <summary>
            http(s)的回应
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:Vit.Core.Util.Net.HttpUtil">
            <summary>
            http发送请求
            </summary>
        </member>
        <member name="M:Vit.Core.Util.Net.HttpUtil.CloneStruct``1(System.Object)">
            <summary>
            从source按照Type类型拷贝数据
            </summary>
            <typeparam name="Type"></typeparam>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:Vit.Core.Util.Net.HttpUtil.SetToHttps(System.Net.HttpWebRequest)">
            <summary>
            设置请求类型为Https
            </summary>
            <param name="request"></param>
        </member>
        <member name="M:Vit.Core.Util.Net.HttpUtil.#cctor">
            <summary>
            静态初始化器，用以初始化https相关配置
            </summary>
        </member>
        <member name="M:Vit.Core.Util.Net.HttpUtil.UrlEncode(System.String)">
            <summary>
             System.Web.HttpUtility.UrlEncode(param)
            </summary>
            <param name="param"></param>
            <returns></returns>
        </member>
        <member name="M:Vit.Core.Util.Net.HttpUtil.UrlDecode(System.String)">
            <summary>
             System.Web.HttpUtility.UrlDecode(param)
            </summary>
            <param name="param"></param>
            <returns></returns>
        </member>
        <member name="M:Vit.Core.Util.Net.HttpUtil.GetTimeStampTen">
            <summary> 
            获取时间戳 10位
            </summary> 
            <returns></returns> 
        </member>
        <member name="M:Vit.Core.Util.Net.HttpUtil.FormatUrlParams(System.Object)">
            <summary>
            返回值demo： "a=4&amp;b=2"
            </summary>
            <param name="parameters">可为string、IDictionary、JObject,例如："a=3&amp;b=5"</param>
            <returns></returns>
        </member>
        <member name="M:Vit.Core.Util.Net.HttpUtil.UrlAddParams(System.String,System.Object)">
            <summary>
            
            </summary>
            <param name="url">不可为null,demo："http://www.a.com"、"http://www.a.com?a=1&amp;b=2"</param>
            <param name="parameters">可为string、IDictionary、JObject</param>
            <returns></returns>
        </member>
        <member name="F:Vit.Core.Util.Net.HttpUtil.Timeout">
            <summary>
            获取或设置请求超时之前的时间长度（以毫秒为单位，默认1分钟）。
            </summary>
        </member>
        <member name="M:Vit.Core.Util.Net.HttpUtil.GetRequest(System.String)">
            <summary>
            
            </summary>
            <param name="url"></param>
            <returns></returns>
        </member>
        <member name="F:Vit.Core.Util.Net.HttpUtil._defaultEncoding">
            <summary>
            
            </summary>
        </member>
        <member name="P:Vit.Core.Util.Net.HttpUtil.defaultEncoding">
            <summary>
            
            </summary>
        </member>
        <member name="M:Vit.Core.Util.Net.HttpUtil.GetResponseEncoding(System.Net.HttpWebResponse)">
            <summary>
            
            </summary>
            <param name="response"></param>
            <returns></returns>
        </member>
        <member name="M:Vit.Core.Util.Net.HttpUtil.GetRequest(Vit.Core.Util.Net.RequestParam)">
            <summary>
            
            </summary>
            <param name="requestParam"></param>
            <returns></returns>
        </member>
        <member name="M:Vit.Core.Util.Net.HttpUtil.Response_GetString(System.Net.HttpWebResponse,Vit.Core.Util.Net.RequestParam)">
            <summary>
            从response读取返回的字符串
            </summary>
            <param name="response"></param>
            <param name="requestParam"></param>
            <returns></returns>
        </member>
        <member name="M:Vit.Core.Util.Net.HttpUtil.FormatResponseData(System.Net.HttpWebResponse,System.String,System.String)">
            <summary>
            转换读取的字符串为指定的类型
            </summary>
            <param name="response"></param>
            <param name="data"></param>
            <param name="responseContentType">可为"json",若不指定有效值则默认为'string'</param>
            <returns></returns>
        </member>
        <member name="M:Vit.Core.Util.Net.HttpUtil.Ajax(Vit.Core.Util.Net.RequestParam)">
            <summary>
            发起http(s)请求
            </summary>
            <param name="requestParam"></param>
            <returns></returns>
        </member>
        <member name="M:Vit.Core.Util.Net.HttpUtil.Ajax_String(Vit.Core.Util.Net.RequestParam)">
            <summary>
            
            </summary>
            <param name="requestParam"></param>
            <returns></returns>
        </member>
        <member name="M:Vit.Core.Util.Net.HttpUtil.Ajax``1(Vit.Core.Util.Net.RequestParam)">
            <summary>
            发起http(s)请求,返回的数据先转换为string再转换为T类型（T可为 JObject/JArray等）
            </summary>
            <param name="requestParam"></param>
            <returns></returns>
        </member>
        <member name="M:Vit.Core.Util.Net.HttpUtil.Response_GetByte(System.Net.HttpWebResponse)">
            <summary>
            下载byte数据
            从response 下载byte数据
            </summary>
            <param name="response"></param> 
        </member>
        <member name="M:Vit.Core.Util.Net.HttpUtil.Response_DownloadFile(System.Net.HttpWebResponse,System.String)">
            <summary>
            下载文件
            从response 下载数据放到文件filePath中。
            </summary>
            <param name="response"></param>
            <param name="filePath"></param>
        </member>
        <member name="M:Vit.Core.Util.Net.HttpUtil.Ajax_Get(System.String,System.Object)">
            <summary>
            发起http(s) get请求
            </summary>
            <param name="url"></param>
            <param name="urlParams">放到url中的参数。可为string、IDictionary、JObject</param>
            <returns></returns>
        </member>
        <member name="M:Vit.Core.Util.Net.HttpUtil.Ajax_Post(System.String,System.Object,System.Object)">
            <summary>
            发起http(s) post请求
            </summary>
            <param name="url"></param>
            <param name="getParameters">放到url中的参数。可为string、IDictionary、JObject </param>
            <param name="postParameters">post请求参数（消息主体）。可为string、IDictionary、JObject/JArray </param>
            <returns></returns>
        </member>
        <member name="M:Vit.Core.Util.Net.HttpUtil.Ajax_Post(System.String,System.Object)">
            <summary>
            发起http(s) post请求
            </summary>
            <param name="url"></param>
            <param name="postParameters">post请求参数（消息主体）。可为string、IDictionary、JObject/JArray </param>
            <returns></returns>
        </member>
        <member name="T:Vit.Core.Util.Net.RequestParam">
            <summary>
            http(s)的请求配置
            </summary>
        </member>
        <member name="F:Vit.Core.Util.Net.RequestParam.url">
            <summary>
            可为https请求。例如： "http://www.baidu.com" "https://api.253.com/open/i/ocr/id-ocr"
            </summary>
        </member>
        <member name="F:Vit.Core.Util.Net.RequestParam.Method">
            <summary>
            "GET"、"POST"、"DELETE" 等，默认"GET"
            </summary>
        </member>
        <member name="F:Vit.Core.Util.Net.RequestParam.urlParams">
            <summary>
            放到url中的参数。可为string、IDictionary、JObject
            </summary>
        </member>
        <member name="F:Vit.Core.Util.Net.RequestParam.body">
            <summary>
            请求实体参数（消息主体，多为post参数）。可为 byte[]、string/IDictionary(requestContentType:"application/x-www-form-urlencoded")、JObject/JArray/Object(requestContentType:"application/json")
            </summary>
        </member>
        <member name="F:Vit.Core.Util.Net.RequestParam.requestContentType">
            <summary>
            请求体的类型(若不指定则根据body类型获取)，例如"application/x-www-form-urlencoded"、"application/json"、"text/xml; charset=utf-8" 等
            </summary>
        </member>
        <member name="F:Vit.Core.Util.Net.RequestParam.responseContentType">
            <summary>
            强制指定返回数据类型（可为"json"、"string",若不指定有效值则默认为"string"）
            </summary>
        </member>
        <member name="F:Vit.Core.Util.Net.RequestParam.headers">
            <summary>
            http 请求头（可不指定，一般存放 Authorization Content-Type 等）
            </summary>
        </member>
        <member name="F:Vit.Core.Util.Net.RequestParam._requestEncoding">
            <summary>
            
            </summary>
        </member>
        <member name="P:Vit.Core.Util.Net.RequestParam.requestEncoding">
            <summary>
            请求编码
            </summary>
        </member>
        <member name="F:Vit.Core.Util.Net.RequestParam.responseEncoding">
            <summary>
            
            </summary>
        </member>
        <member name="M:Vit.Core.Util.Net.RequestParam.GetRequestBodyData(System.String@,System.Byte[]@)">
            <summary>
            获取请求Body
            </summary>
            <returns></returns>
        </member>
        <member name="T:Vit.Core.Util.Pipelines.PipeFrame">
            <summary>
            线程不安全
            </summary>
        </member>
        <member name="F:Vit.Core.Util.Pool.ObjectPool`1.Capacity">
            <summary>
            Gets or sets the total number of elements the internal data structure can hold without resizing.(default:100000)
            </summary>
        </member>
        <member name="T:Vit.Core.Util.SsExp.SsExpCalculator">
            <summary>
            json ExpressionCalculator
            json表达式计算器
            </summary>
        </member>
        <member name="T:Vit.Core.Util.Threading.AsyncCache`1">
            <summary>
            多包裹一层的原因是 子异步任务结束时会还原子异步任务对AsyncLocal做的更改(即子异步任务对AsyncLocal做的更改不会保留到子异步任务结束后的父异步任务中)
            参见https://blog.csdn.net/kkfd1002/article/details/80102244
            </summary>
        </member>
        <member name="T:Vit.Core.Util.Threading.LongTaskHelp">
            <summary>
            注意！！！慎用！！！
            请勿处理ThreadInterruptedException异常，否则导致线程无法正常结束
                    catch (Exception ex) when (!(ex.GetBaseException() is ThreadInterruptedException))
            </summary>
        </member>
        <member name="P:Vit.Core.Util.Threading.LongTaskHelp.threadCount">
            <summary>
            线程数，默认1
            </summary>
        </member>
        <member name="F:Vit.Core.Util.Threading.LongTaskHelp.action">
            <summary>
            请勿处理ThreadInterruptedException异常，否则导致线程无法正常结束
            </summary>
        </member>
        <member name="F:Vit.Core.Util.Threading.LongTaskHelp.loop">
            <summary>
            是否在执行完成后重新执行。
            </summary>
        </member>
        <member name="F:Vit.Core.Util.Threading.LongTaskHelp.stopWhenException">
            <summary>
            出现异常时是否终止
            </summary>
        </member>
        <member name="F:Vit.Core.Util.Threading.LongTaskHelp.threadName">
            <summary>
            线程名称
            </summary>
        </member>
        <member name="M:Vit.Core.Util.Threading.LongTaskHelp.Stop">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:Vit.Core.Util.Threading.LongTaskHelp_TimeLimit">
            <summary>
            注意！！！慎用！！！
            请勿处理ThreadInterruptedException异常，否则导致线程无法正常结束
            若在超时时间内未清理状态，则强制关闭任务
            </summary>
        </member>
        <member name="P:Vit.Core.Util.Threading.LongTaskHelp_TimeLimit.threadCount">
            <summary>
            线程数，默认1
            </summary>
        </member>
        <member name="F:Vit.Core.Util.Threading.LongTaskHelp_TimeLimit.loop">
            <summary>
            是否在执行完成后重新执行(默认true)
            </summary>
        </member>
        <member name="F:Vit.Core.Util.Threading.LongTaskHelp_TimeLimit.stopWhenException">
            <summary>
            出现异常时是否终止(默认false)
            </summary>
        </member>
        <member name="F:Vit.Core.Util.Threading.LongTaskHelp_TimeLimit.timeout_ms">
            <summary>
            超时时间，（主动关闭超过此时间的任务,实际任务强制关闭的时间会在1倍超时时间到2倍超时时间内)。单位：ms。(默认60000)
            脉冲间隔。
            </summary>
        </member>
        <member name="F:Vit.Core.Util.Threading.LongTaskHelp_TimeLimit.pulseMaker">
            <summary>
            脉冲生产器
            </summary>
        </member>
        <member name="M:Vit.Core.Util.Threading.LongTaskHelp_TimeLimit.PulseMake(System.Object)">
            <summary>
            电子脉冲，在固定的时间间隔发送脉冲
            </summary>
        </member>
        <member name="F:Vit.Core.Util.Threading.LongTaskHelp_TimeLimit.threadName">
            <summary>
            线程名称
            </summary>
        </member>
        <member name="M:Vit.Core.Util.Threading.LongTaskHelp_TimeLimit.Stop">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="P:Vit.Core.Util.Threading.LongTaskHelp_TimeLimit.Worker.isDealing">
            <summary>
            任务是否在执行中
            </summary>
        </member>
        <member name="F:Vit.Core.Util.Threading.LongTaskHelp_TimeLimit.Worker.GetWork">
            <summary>
            阻塞获取任务
            </summary>
        </member>
        <member name="F:Vit.Core.Util.Threading.LongTaskHelp_TimeLimit.Worker.DealWork">
            <summary>
            不可抛异常
            </summary>
        </member>
        <member name="F:Vit.Core.Util.Threading.LongTaskHelp_TimeLimit.Worker.OnFinish">
            <summary>
            不可抛异常
            </summary>
        </member>
        <member name="F:Vit.Core.Util.Threading.LongTaskHelp_TimeLimit.Worker.OnTimeout">
            <summary>
            不可抛异常
            </summary>
        </member>
        <member name="F:Vit.Core.Util.Threading.LongTaskHelp_TimeLimit.Worker.pulseCount">
            <summary>
            当前任务所经历的脉冲的次数
            </summary>
        </member>
        <member name="T:Vit.Core.Util.Threading.RepeatTaskHelp">
            <summary>
            注意！！！慎用！！！
            务必确保可以手动结束任务。
            在每次调用完成后才会检测是否结束。调用过程中是不会结束的，除非手动抛出异常。
            </summary>
        </member>
        <member name="F:Vit.Core.Util.Threading.RepeatTaskHelp.threadName">
            <summary>
            线程名称
            </summary>
        </member>
        <member name="F:Vit.Core.Util.Threading.RepeatTaskHelp.threadCount">
            <summary>
            线程数,默认为1
            </summary>
        </member>
        <member name="F:Vit.Core.Util.Threading.RepeatTaskHelp.repeatCountPerThread">
            <summary>
            每个线程重复执行的次数,默认为1。若指定为0则重复无限次数
            </summary>
        </member>
        <member name="F:Vit.Core.Util.Threading.RepeatTaskHelp.action">
            <summary>
            
            </summary>
        </member>
        <member name="P:Vit.Core.Util.Threading.RepeatTaskHelp.stopWhenException">
            <summary>
            出现异常时是否终止,默认false
            </summary>
        </member>
        <member name="P:Vit.Core.Util.Threading.RepeatTaskHelp.sendStopSignal">
            <summary>
            是否发送结束信号
            </summary>
        </member>
        <member name="P:Vit.Core.Util.Threading.RepeatTaskHelp.RunningThreadCount">
            <summary>
            执行中的线程数
            </summary>
        </member>
        <member name="M:Vit.Core.Util.Threading.RepeatTaskHelp.Stop">
            <summary>
            只发送发送结束信号，不保证会立即结束所有任务
            </summary>
            <returns></returns>
        </member>
        <member name="F:Vit.Core.Util.Threading.SersTimer.intervalMs">
            <summary>
            定时器间隔，单位：ms
            </summary>
        </member>
        <member name="P:Vit.Core.Util.Threading.TaskQueue.threadName">
            <summary>
            线程名称
            </summary>
        </member>
        <member name="M:Vit.Core.Util.XmlComment.XmlMng.AddXml(System.String)">
            <summary>
            添加xml注释
            </summary>
            <param name="xmlFilePath"></param>
        </member>
        <member name="M:Vit.Core.Util.XmlComment.XmlMng.AddBin(System.String)">
            <summary>
            添加bin目录下的所有xml注释文件
            </summary>
            <param name="path"></param>
        </member>
    </members>
</doc>
